
RTC_LED_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002460  08002460  00003460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002558  08002558  00004070  2**0
                  CONTENTS
  4 .ARM          00000008  08002558  08002558  00003558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002560  08002560  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002560  08002560  00003560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002564  08002564  00003564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002568  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004070  2**0
                  CONTENTS
 10 .bss          000001ac  20000070  20000070  00004070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00004070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000275c  00000000  00000000  0000409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bb2  00000000  00000000  000067f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000318  00000000  00000000  000073a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000024a  00000000  00000000  000076c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040b6  00000000  00000000  0000790a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003cce  00000000  00000000  0000b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000de6f  00000000  00000000  0000f68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001d4fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001354  00000000  00000000  0001d540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0001e894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002448 	.word	0x08002448

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002448 	.word	0x08002448

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RTC_DS1307_I2C_PinConfig>:

/*
 * Helper functions
 */
static void RTC_DS1307_I2C_PinConfig()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t sda, scl;
	memset(&sda,0,sizeof(sda));
 8000276:	f107 030c 	add.w	r3, r7, #12
 800027a:	220c      	movs	r2, #12
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fb64 	bl	800194c <memset>
	memset(&scl,0,sizeof(scl));
 8000284:	463b      	mov	r3, r7
 8000286:	220c      	movs	r2, #12
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fb5e 	bl	800194c <memset>

	sda.pGPIOx = RTC_DS1307_I2C_PORT;
 8000290:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <RTC_DS1307_I2C_PinConfig+0x74>)
 8000292:	60fb      	str	r3, [r7, #12]
	sda.GPIO_PinConfig.GPIO_PinNumber = RTC_DS1307_I2C_SDA;
 8000294:	2307      	movs	r3, #7
 8000296:	743b      	strb	r3, [r7, #16]
	sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000298:	2302      	movs	r3, #2
 800029a:	747b      	strb	r3, [r7, #17]
	sda.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF4;
 800029c:	2304      	movs	r3, #4
 800029e:	757b      	strb	r3, [r7, #21]
	sda.GPIO_PinConfig.GPIO_PinPuPdControl = RTC_Ds1307_I2C_PUPD;
 80002a0:	2301      	movs	r3, #1
 80002a2:	74fb      	strb	r3, [r7, #19]
	sda.GPIO_PinConfig.GPIO_PinSpeed = RTC_DS1307_I2C_PIN_SPEED;
 80002a4:	2300      	movs	r3, #0
 80002a6:	74bb      	strb	r3, [r7, #18]
	sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_OD;
 80002a8:	2301      	movs	r3, #1
 80002aa:	753b      	strb	r3, [r7, #20]

	GPIO_Init(&sda);
 80002ac:	f107 030c 	add.w	r3, r7, #12
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 ffab 	bl	800120c <GPIO_Init>

	scl.pGPIOx = RTC_DS1307_I2C_PORT;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <RTC_DS1307_I2C_PinConfig+0x74>)
 80002b8:	603b      	str	r3, [r7, #0]
	scl.GPIO_PinConfig.GPIO_PinNumber = RTC_DS1307_I2C_SCL;
 80002ba:	2306      	movs	r3, #6
 80002bc:	713b      	strb	r3, [r7, #4]
	scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002be:	2302      	movs	r3, #2
 80002c0:	717b      	strb	r3, [r7, #5]
	scl.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALTFN_AF4;
 80002c2:	2304      	movs	r3, #4
 80002c4:	727b      	strb	r3, [r7, #9]
	scl.GPIO_PinConfig.GPIO_PinSpeed = RTC_DS1307_I2C_PIN_SPEED;
 80002c6:	2300      	movs	r3, #0
 80002c8:	71bb      	strb	r3, [r7, #6]
	scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_OD;
 80002ca:	2301      	movs	r3, #1
 80002cc:	723b      	strb	r3, [r7, #8]
	scl.GPIO_PinConfig.GPIO_PinPuPdControl = RTC_Ds1307_I2C_PUPD;
 80002ce:	2301      	movs	r3, #1
 80002d0:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(&scl);
 80002d2:	463b      	mov	r3, r7
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 ff99 	bl	800120c <GPIO_Init>
}
 80002da:	bf00      	nop
 80002dc:	3718      	adds	r7, #24
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40020400 	.word	0x40020400

080002e8 <RTC_DS1307_I2C_Config>:

static void RTC_DS1307_I2C_Config()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	rtcHandle.pI2Cx = RTC_DS1307_I2C;
 80002ec:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <RTC_DS1307_I2C_Config+0x28>)
 80002ee:	4a09      	ldr	r2, [pc, #36]	@ (8000314 <RTC_DS1307_I2C_Config+0x2c>)
 80002f0:	609a      	str	r2, [r3, #8]
	rtcHandle.I2C_Config.I2C_ACKControl = I2C_ACKCTRL_ACK_EN;
 80002f2:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <RTC_DS1307_I2C_Config+0x28>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	715a      	strb	r2, [r3, #5]
	rtcHandle.I2C_Config.I2C_DeviceAddress = RTC_DS1307_SLAVE_ADDR;
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <RTC_DS1307_I2C_Config+0x28>)
 80002fa:	2268      	movs	r2, #104	@ 0x68
 80002fc:	711a      	strb	r2, [r3, #4]
	rtcHandle.I2C_Config.I2C_SCLSpeed = RTC_DS1307_I2C_SPEED;
 80002fe:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <RTC_DS1307_I2C_Config+0x28>)
 8000300:	4a05      	ldr	r2, [pc, #20]	@ (8000318 <RTC_DS1307_I2C_Config+0x30>)
 8000302:	601a      	str	r2, [r3, #0]

	I2C_Init(&rtcHandle);
 8000304:	4802      	ldr	r0, [pc, #8]	@ (8000310 <RTC_DS1307_I2C_Config+0x28>)
 8000306:	f000 fc51 	bl	8000bac <I2C_Init>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000008c 	.word	0x2000008c
 8000314:	40005400 	.word	0x40005400
 8000318:	000186a0 	.word	0x000186a0

0800031c <RTC_DS1307_Init>:
 *
 * @Note              -  none

 *********************************************************************/
uint8_t RTC_DS1307_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	// 1. Iniitialize the GPIO pins for I2C
	RTC_DS1307_I2C_PinConfig();
 8000322:	f7ff ffa5 	bl	8000270 <RTC_DS1307_I2C_PinConfig>

	// 2. Initialize the I2C pins
	RTC_DS1307_I2C_Config();
 8000326:	f7ff ffdf 	bl	80002e8 <RTC_DS1307_I2C_Config>

	// 3. Enable the I2C peripheral
	I2C_PeripheralControl(RTC_DS1307_I2C, ENABLE);
 800032a:	2101      	movs	r1, #1
 800032c:	4809      	ldr	r0, [pc, #36]	@ (8000354 <RTC_DS1307_Init+0x38>)
 800032e:	f000 fc1f 	bl	8000b70 <I2C_PeripheralControl>

	// 4. By default, the CH pin is set to 1. To start the clock, we should make CH = 0
	RTC_DS1307_write(0x00,RTC_DS1307_REG_SECONDS);
 8000332:	2100      	movs	r1, #0
 8000334:	2000      	movs	r0, #0
 8000336:	f000 f955 	bl	80005e4 <RTC_DS1307_write>

	// 5. Read back clock halt bit to confirm if it is really set to 0
	uint8_t clockState = RTC_DS1307_read(RTC_DS1307_REG_SECONDS);
 800033a:	2000      	movs	r0, #0
 800033c:	f000 f934 	bl	80005a8 <RTC_DS1307_read>
 8000340:	4603      	mov	r3, r0
 8000342:	71fb      	strb	r3, [r7, #7]

	return ((clockState >> 7) & 0x1);
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	09db      	lsrs	r3, r3, #7
 8000348:	b2db      	uxtb	r3, r3

}
 800034a:	4618      	mov	r0, r3
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40005400 	.word	0x40005400

08000358 <RTC_DS1307_setTime>:
 *
 * @Note              -  none

 *********************************************************************/
void RTC_DS1307_setTime(RTC_Handle_time_t *timeHandle)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	// Set the seconds
	uint8_t secondBCD = bintoBCD(timeHandle->seconds);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f973 	bl	8000650 <bintoBCD>
 800036a:	4603      	mov	r3, r0
 800036c:	73bb      	strb	r3, [r7, #14]

	// set the minutes
	uint8_t minuteBCD = bintoBCD(timeHandle->minutes);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	785b      	ldrb	r3, [r3, #1]
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f96c 	bl	8000650 <bintoBCD>
 8000378:	4603      	mov	r3, r0
 800037a:	737b      	strb	r3, [r7, #13]

	// set the hours
	uint8_t hourBCD = bintoBCD(timeHandle->hours);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	789b      	ldrb	r3, [r3, #2]
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f965 	bl	8000650 <bintoBCD>
 8000386:	4603      	mov	r3, r0
 8000388:	733b      	strb	r3, [r7, #12]
	uint8_t temp = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	73fb      	strb	r3, [r7, #15]

	RTC_DS1307_write(secondBCD & 0x7F, RTC_DS1307_REG_SECONDS);
 800038e:	7bbb      	ldrb	r3, [r7, #14]
 8000390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f923 	bl	80005e4 <RTC_DS1307_write>

	RTC_DS1307_write(minuteBCD, RTC_DS1307_REG_MINUTES);
 800039e:	7b7b      	ldrb	r3, [r7, #13]
 80003a0:	2101      	movs	r1, #1
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f91e 	bl	80005e4 <RTC_DS1307_write>

	if(timeHandle->timeFormat == RTC_DS1307_TIME_FORMAT_24HRS)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	78db      	ldrb	r3, [r3, #3]
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d11d      	bne.n	80003ec <RTC_DS1307_setTime+0x94>
	{
		temp = 0 << 6; // resetting the bit 6 to make is 24 hour
 80003b0:	2300      	movs	r3, #0
 80003b2:	73fb      	strb	r3, [r7, #15]
		temp |= ((hourBCD/10) << 4);
 80003b4:	7b3b      	ldrb	r3, [r7, #12]
 80003b6:	4a27      	ldr	r2, [pc, #156]	@ (8000454 <RTC_DS1307_setTime+0xfc>)
 80003b8:	fba2 2303 	umull	r2, r3, r2, r3
 80003bc:	08db      	lsrs	r3, r3, #3
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	011b      	lsls	r3, r3, #4
 80003c2:	b25a      	sxtb	r2, r3
 80003c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b25b      	sxtb	r3, r3
 80003cc:	73fb      	strb	r3, [r7, #15]
		temp |= hourBCD%10;
 80003ce:	7b3a      	ldrb	r2, [r7, #12]
 80003d0:	4b20      	ldr	r3, [pc, #128]	@ (8000454 <RTC_DS1307_setTime+0xfc>)
 80003d2:	fba3 1302 	umull	r1, r3, r3, r2
 80003d6:	08d9      	lsrs	r1, r3, #3
 80003d8:	460b      	mov	r3, r1
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	440b      	add	r3, r1
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	7bfb      	ldrb	r3, [r7, #15]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	73fb      	strb	r3, [r7, #15]
 80003ea:	e029      	b.n	8000440 <RTC_DS1307_setTime+0xe8>
	}
	else
	{
		temp = 1 << 6; // setting the bit 6 to make is 12 hour
 80003ec:	2340      	movs	r3, #64	@ 0x40
 80003ee:	73fb      	strb	r3, [r7, #15]
		if(timeHandle->timeFormat == RTC_DS1307_TIME_FORMAT_12HRS_PM) // setting/resetting the 5th bit based on AM PM
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	78db      	ldrb	r3, [r3, #3]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d104      	bne.n	8000402 <RTC_DS1307_setTime+0xaa>
		{
			temp |= 1 << 5;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	73fb      	strb	r3, [r7, #15]
 8000400:	e003      	b.n	800040a <RTC_DS1307_setTime+0xb2>
		}
		else
		{
			temp &= ~(1 << 5);
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	f023 0320 	bic.w	r3, r3, #32
 8000408:	73fb      	strb	r3, [r7, #15]
		}
		temp |= ((hourBCD/10) << 4);
 800040a:	7b3b      	ldrb	r3, [r7, #12]
 800040c:	4a11      	ldr	r2, [pc, #68]	@ (8000454 <RTC_DS1307_setTime+0xfc>)
 800040e:	fba2 2303 	umull	r2, r3, r2, r3
 8000412:	08db      	lsrs	r3, r3, #3
 8000414:	b2db      	uxtb	r3, r3
 8000416:	011b      	lsls	r3, r3, #4
 8000418:	b25a      	sxtb	r2, r3
 800041a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800041e:	4313      	orrs	r3, r2
 8000420:	b25b      	sxtb	r3, r3
 8000422:	73fb      	strb	r3, [r7, #15]
		temp |= (hourBCD%10);
 8000424:	7b3a      	ldrb	r2, [r7, #12]
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <RTC_DS1307_setTime+0xfc>)
 8000428:	fba3 1302 	umull	r1, r3, r3, r2
 800042c:	08d9      	lsrs	r1, r3, #3
 800042e:	460b      	mov	r3, r1
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	440b      	add	r3, r1
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	b2da      	uxtb	r2, r3
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	4313      	orrs	r3, r2
 800043e:	73fb      	strb	r3, [r7, #15]
	}
	RTC_DS1307_write(temp,RTC_DS1307_REG_HOURS);
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	2102      	movs	r1, #2
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f8cd 	bl	80005e4 <RTC_DS1307_write>
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	cccccccd 	.word	0xcccccccd

08000458 <RTC_DS1307_getTime>:
 *
 * @Note              -  none

 *********************************************************************/
void RTC_DS1307_getTime(RTC_Handle_time_t *timeHandle)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	uint8_t value;

	// fetch seconds data
	value = RTC_DS1307_read(RTC_DS1307_REG_SECONDS);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 f8a1 	bl	80005a8 <RTC_DS1307_read>
 8000466:	4603      	mov	r3, r0
 8000468:	73fb      	strb	r3, [r7, #15]
	// clear the CH bit as it is not relevant to us when we fetch the seconds value
	value &= ~(1 << RTC_DS1307_REG_SECONDS_CH);
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000470:	73fb      	strb	r3, [r7, #15]

	timeHandle->seconds = BCDtobin(value);
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f8d1 	bl	800061c <BCDtobin>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	701a      	strb	r2, [r3, #0]

	// fetch minutes data
	value = RTC_DS1307_read(RTC_DS1307_REG_MINUTES);
 8000482:	2001      	movs	r0, #1
 8000484:	f000 f890 	bl	80005a8 <RTC_DS1307_read>
 8000488:	4603      	mov	r3, r0
 800048a:	73fb      	strb	r3, [r7, #15]
	timeHandle->minutes = BCDtobin(value);
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f8c4 	bl	800061c <BCDtobin>
 8000494:	4603      	mov	r3, r0
 8000496:	461a      	mov	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	705a      	strb	r2, [r3, #1]

	//fetch hours data
	value = RTC_DS1307_read(RTC_DS1307_REG_HOURS);
 800049c:	2002      	movs	r0, #2
 800049e:	f000 f883 	bl	80005a8 <RTC_DS1307_read>
 80004a2:	4603      	mov	r3, r0
 80004a4:	73fb      	strb	r3, [r7, #15]
	// check if 6th bit is set.
	if(value & (1 << 6)) // if bit 6 is set, then its 12 hour clock
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d010      	beq.n	80004d2 <RTC_DS1307_getTime+0x7a>
	{
		if(value  & (1 << 5)) // if bit 5 is set, then it is PM
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	f003 0320 	and.w	r3, r3, #32
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d003      	beq.n	80004c2 <RTC_DS1307_getTime+0x6a>
		{
			timeHandle->timeFormat = RTC_DS1307_TIME_FORMAT_12HRS_PM;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2201      	movs	r2, #1
 80004be:	70da      	strb	r2, [r3, #3]
 80004c0:	e002      	b.n	80004c8 <RTC_DS1307_getTime+0x70>
		}
		else
		{
			timeHandle->timeFormat = RTC_DS1307_TIME_FORMAT_12HRS_AM;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2200      	movs	r2, #0
 80004c6:	70da      	strb	r2, [r3, #3]
		}
		// get rid of bit 6 and bit 5 and fetch the hours data
		value &= ~(0x3 << RTC_DS1307_REG_HOURS_AMPM_10HOUR);
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80004ce:	73fb      	strb	r3, [r7, #15]
 80004d0:	e006      	b.n	80004e0 <RTC_DS1307_getTime+0x88>
	}
	else
	{
		timeHandle->timeFormat = RTC_DS1307_TIME_FORMAT_24HRS;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2202      	movs	r2, #2
 80004d6:	70da      	strb	r2, [r3, #3]
		// get rid of bit 6 and fetch the hours data
		value &= ~(1 << RTC_DS1307_REG_HOURS_12_24);
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004de:	73fb      	strb	r3, [r7, #15]
	}
	timeHandle->hours = BCDtobin(value);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f89a 	bl	800061c <BCDtobin>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	709a      	strb	r2, [r3, #2]
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <RTC_DS1307_setFullDate>:
 *
 * @Note              -  none

 *********************************************************************/
void RTC_DS1307_setFullDate(RTC_Handle_date_t *dateHandle)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	RTC_DS1307_write(dateHandle->date, RTC_DS1307_REG_DATE);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2104      	movs	r1, #4
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f86c 	bl	80005e4 <RTC_DS1307_write>

	RTC_DS1307_write(dateHandle->month, RTC_DS1307_REG_MONTH);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	2105      	movs	r1, #5
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f866 	bl	80005e4 <RTC_DS1307_write>

	RTC_DS1307_write(dateHandle->year, RTC_DS1307_REG_YEAR);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	789b      	ldrb	r3, [r3, #2]
 800051c:	2106      	movs	r1, #6
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f860 	bl	80005e4 <RTC_DS1307_write>

	RTC_DS1307_write(dateHandle->day, RTC_DS1307_REG_DAY);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	78db      	ldrb	r3, [r3, #3]
 8000528:	2103      	movs	r1, #3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f85a 	bl	80005e4 <RTC_DS1307_write>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <RTC_DS1307_getFullDate>:
 *
 * @Note              -  none

 *********************************************************************/
void RTC_DS1307_getFullDate(RTC_Handle_date_t *dateHandle)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	uint8_t value;

	// Fetch the day
	value = RTC_DS1307_read(RTC_DS1307_REG_DAY);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f831 	bl	80005a8 <RTC_DS1307_read>
 8000546:	4603      	mov	r3, r0
 8000548:	73fb      	strb	r3, [r7, #15]
	dateHandle->day = value;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7bfa      	ldrb	r2, [r7, #15]
 800054e:	70da      	strb	r2, [r3, #3]

	// fetch the date
	value = RTC_DS1307_read(RTC_DS1307_REG_DATE);
 8000550:	2004      	movs	r0, #4
 8000552:	f000 f829 	bl	80005a8 <RTC_DS1307_read>
 8000556:	4603      	mov	r3, r0
 8000558:	73fb      	strb	r3, [r7, #15]
	dateHandle->date = BCDtobin(value);
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f85d 	bl	800061c <BCDtobin>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	701a      	strb	r2, [r3, #0]

	// fetch the month
	value = RTC_DS1307_read(RTC_DS1307_REG_MONTH);
 800056a:	2005      	movs	r0, #5
 800056c:	f000 f81c 	bl	80005a8 <RTC_DS1307_read>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]
	dateHandle->month = BCDtobin(value);
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f850 	bl	800061c <BCDtobin>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	705a      	strb	r2, [r3, #1]

	// fetch the date
	value = RTC_DS1307_read(RTC_DS1307_REG_YEAR);
 8000584:	2006      	movs	r0, #6
 8000586:	f000 f80f 	bl	80005a8 <RTC_DS1307_read>
 800058a:	4603      	mov	r3, r0
 800058c:	73fb      	strb	r3, [r7, #15]
	dateHandle->year = BCDtobin(value);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f843 	bl	800061c <BCDtobin>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	709a      	strb	r2, [r3, #2]


}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <RTC_DS1307_read>:
 *
 * @Note              -  none

 *********************************************************************/
uint8_t RTC_DS1307_read(uint8_t addr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	 */

	uint8_t data;

	// 1. Data write to set the pointer to the address from which we want to read
	I2C_MasterSendData(&rtcHandle, &addr, 1, RTC_DS1307_SLAVE_ADDR, 0);
 80005b2:	1df9      	adds	r1, r7, #7
 80005b4:	2300      	movs	r3, #0
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2368      	movs	r3, #104	@ 0x68
 80005ba:	2201      	movs	r2, #1
 80005bc:	4808      	ldr	r0, [pc, #32]	@ (80005e0 <RTC_DS1307_read+0x38>)
 80005be:	f000 fbc0 	bl	8000d42 <I2C_MasterSendData>

	// 2. Now we read from the data in the address held in addr and store in the variable data
	I2C_MasterReceiveData(&rtcHandle, &data, 1, RTC_DS1307_SLAVE_ADDR, 0);
 80005c2:	f107 010f 	add.w	r1, r7, #15
 80005c6:	2300      	movs	r3, #0
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2368      	movs	r3, #104	@ 0x68
 80005cc:	2201      	movs	r2, #1
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <RTC_DS1307_read+0x38>)
 80005d0:	f000 fc26 	bl	8000e20 <I2C_MasterReceiveData>

	return data;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000008c 	.word	0x2000008c

080005e4 <RTC_DS1307_write>:
 *
 * @Note              -  none

 *********************************************************************/
void RTC_DS1307_write(uint8_t data, uint8_t addr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = addr;
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	733b      	strb	r3, [r7, #12]
	tx[1] = data;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	737b      	strb	r3, [r7, #13]

	I2C_MasterSendData(&rtcHandle, tx, 2, RTC_DS1307_SLAVE_ADDR, 0);
 80005fc:	f107 010c 	add.w	r1, r7, #12
 8000600:	2300      	movs	r3, #0
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2368      	movs	r3, #104	@ 0x68
 8000606:	2202      	movs	r2, #2
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <RTC_DS1307_write+0x34>)
 800060a:	f000 fb9a 	bl	8000d42 <I2C_MasterSendData>
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000008c 	.word	0x2000008c

0800061c <BCDtobin>:
 *
 * @Note              -  none

 *********************************************************************/
static uint8_t BCDtobin(uint8_t BCD)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	uint8_t A0,A1;

	A1 = (uint8_t)((BCD >> 4)*10);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	091b      	lsrs	r3, r3, #4
 800062a:	b2db      	uxtb	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	4413      	add	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
	A0 = (BCD & (uint8_t)0x0F);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 030f 	and.w	r3, r3, #15
 800063c:	73bb      	strb	r3, [r7, #14]
	return (A1+A0);
 800063e:	7bfa      	ldrb	r2, [r7, #15]
 8000640:	7bbb      	ldrb	r3, [r7, #14]
 8000642:	4413      	add	r3, r2
 8000644:	b2db      	uxtb	r3, r3
}
 8000646:	4618      	mov	r0, r3
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <bintoBCD>:
 *
 * @Note              -  none

 *********************************************************************/
static uint8_t bintoBCD(uint8_t bin)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t bcd;
	uint8_t A0,A1;

	bcd = bin;
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	73fb      	strb	r3, [r7, #15]
	if(bin > 9)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b09      	cmp	r3, #9
 8000662:	d918      	bls.n	8000696 <bintoBCD+0x46>
	{
		A1 = bin/10; // gives the digit in tens place
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <bintoBCD+0x54>)
 8000668:	fba2 2303 	umull	r2, r3, r2, r3
 800066c:	08db      	lsrs	r3, r3, #3
 800066e:	73bb      	strb	r3, [r7, #14]
		A0 = bin%10; // gives the digit in ones place
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <bintoBCD+0x54>)
 8000674:	fba3 1302 	umull	r1, r3, r3, r2
 8000678:	08d9      	lsrs	r1, r3, #3
 800067a:	460b      	mov	r3, r1
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	737b      	strb	r3, [r7, #13]

		bcd = (A1 << 4) | A0; //shift the tens digit by 4 digits and add the ones digit if the first 4 bits
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	b25a      	sxtb	r2, r3
 800068c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000690:	4313      	orrs	r3, r2
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	cccccccd 	.word	0xcccccccd

080006a8 <main>:

char* date_to_string(RTC_Handle_date_t *date);


int main(void)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
	RTC_Handle_time_t time;
	RTC_Handle_date_t date;

	printf("RTC Test\n");
 80006ae:	4831      	ldr	r0, [pc, #196]	@ (8000774 <main+0xcc>)
 80006b0:	f001 f86c 	bl	800178c <puts>

	if(RTC_DS1307_Init())
 80006b4:	f7ff fe32 	bl	800031c <RTC_DS1307_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d004      	beq.n	80006c8 <main+0x20>
	{
		printf("RTC init failed\n");
 80006be:	482e      	ldr	r0, [pc, #184]	@ (8000778 <main+0xd0>)
 80006c0:	f001 f864 	bl	800178c <puts>
		while(1);
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <main+0x1c>
	}

	date.day = THURSDAY;
 80006c8:	2305      	movs	r3, #5
 80006ca:	71fb      	strb	r3, [r7, #7]
	date.date = 21;
 80006cc:	2315      	movs	r3, #21
 80006ce:	713b      	strb	r3, [r7, #4]
	date.month = 11;
 80006d0:	230b      	movs	r3, #11
 80006d2:	717b      	strb	r3, [r7, #5]
	date.year = 24;
 80006d4:	2318      	movs	r3, #24
 80006d6:	71bb      	strb	r3, [r7, #6]

	time.timeFormat = RTC_DS1307_TIME_FORMAT_12HRS_PM;
 80006d8:	2301      	movs	r3, #1
 80006da:	72fb      	strb	r3, [r7, #11]
	time.hours = 11;
 80006dc:	230b      	movs	r3, #11
 80006de:	72bb      	strb	r3, [r7, #10]
	time.minutes = 13;
 80006e0:	230d      	movs	r3, #13
 80006e2:	727b      	strb	r3, [r7, #9]
	time.seconds = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	723b      	strb	r3, [r7, #8]

	RTC_DS1307_setTime(&time);
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fe33 	bl	8000358 <RTC_DS1307_setTime>
	RTC_DS1307_setFullDate(&date);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff feff 	bl	80004f8 <RTC_DS1307_setFullDate>


	RTC_DS1307_getTime(&time);
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff feaa 	bl	8000458 <RTC_DS1307_getTime>
	RTC_DS1307_getFullDate(&date);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff16 	bl	8000538 <RTC_DS1307_getFullDate>

	char *ampm;
	if(time.timeFormat != RTC_DS1307_TIME_FORMAT_24HRS)
 800070c:	7afb      	ldrb	r3, [r7, #11]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d012      	beq.n	8000738 <main+0x90>
	{
		ampm = (time.timeFormat) ? "PM" : "AM";
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <main+0x74>
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <main+0xd4>)
 800071a:	e000      	b.n	800071e <main+0x76>
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <main+0xd8>)
 800071e:	60fb      	str	r3, [r7, #12]
		printf("Current Time: %s %s",time_to_string(&time),ampm);
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f88b 	bl	8000840 <time_to_string>
 800072a:	4603      	mov	r3, r0
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	4619      	mov	r1, r3
 8000730:	4814      	ldr	r0, [pc, #80]	@ (8000784 <main+0xdc>)
 8000732:	f000 ffc3 	bl	80016bc <iprintf>
 8000736:	e009      	b.n	800074c <main+0xa4>
	}else
	{
		printf("Current Time: %s\n",time_to_string(&time));
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f87f 	bl	8000840 <time_to_string>
 8000742:	4603      	mov	r3, r0
 8000744:	4619      	mov	r1, r3
 8000746:	4810      	ldr	r0, [pc, #64]	@ (8000788 <main+0xe0>)
 8000748:	f000 ffb8 	bl	80016bc <iprintf>
	}

	printf("Current Date: %s <%s> \n",date_to_string(&date),get_day_of_week(date.day));
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f8a0 	bl	8000894 <date_to_string>
 8000754:	4604      	mov	r4, r0
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f819 	bl	8000790 <get_day_of_week>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4621      	mov	r1, r4
 8000764:	4809      	ldr	r0, [pc, #36]	@ (800078c <main+0xe4>)
 8000766:	f000 ffa9 	bl	80016bc <iprintf>

	return 0;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	08002460 	.word	0x08002460
 8000778:	0800246c 	.word	0x0800246c
 800077c:	0800247c 	.word	0x0800247c
 8000780:	08002480 	.word	0x08002480
 8000784:	08002484 	.word	0x08002484
 8000788:	08002498 	.word	0x08002498
 800078c:	080024ac 	.word	0x080024ac

08000790 <get_day_of_week>:

char* get_day_of_week(uint8_t i)
{
 8000790:	b4b0      	push	{r4, r5, r7}
 8000792:	b08b      	sub	sp, #44	@ 0x2c
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <get_day_of_week+0x38>)
 800079c:	f107 040c 	add.w	r4, r7, #12
 80007a0:	461d      	mov	r5, r3
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	3328      	adds	r3, #40	@ 0x28
 80007b6:	443b      	add	r3, r7
 80007b8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	372c      	adds	r7, #44	@ 0x2c
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bcb0      	pop	{r4, r5, r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	08002508 	.word	0x08002508

080007cc <number_to_string>:


void number_to_string(uint8_t num, char* buf)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
	if(num < 10)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b09      	cmp	r3, #9
 80007dc:	d809      	bhi.n	80007f2 <number_to_string+0x26>
	{
		buf[0] = '0';
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2230      	movs	r2, #48	@ 0x30
 80007e2:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	3230      	adds	r2, #48	@ 0x30
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
	else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 80007f0:	e01f      	b.n	8000832 <number_to_string+0x66>
	else if(num >= 10 && num < 99)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b09      	cmp	r3, #9
 80007f6:	d91c      	bls.n	8000832 <number_to_string+0x66>
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b62      	cmp	r3, #98	@ 0x62
 80007fc:	d819      	bhi.n	8000832 <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4a0e      	ldr	r2, [pc, #56]	@ (800083c <number_to_string+0x70>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	3330      	adds	r3, #48	@ 0x30
 800080c:	b2da      	uxtb	r2, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <number_to_string+0x70>)
 8000816:	fba3 1302 	umull	r1, r3, r3, r2
 800081a:	08d9      	lsrs	r1, r3, #3
 800081c:	460b      	mov	r3, r1
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	440b      	add	r3, r1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	b2da      	uxtb	r2, r3
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	3230      	adds	r2, #48	@ 0x30
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	cccccccd 	.word	0xcccccccd

08000840 <time_to_string>:

char* time_to_string(RTC_Handle_time_t *time)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	//return format is "hh:mm:ss"

	static char buf[9];

	buf[2] = ':';
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <time_to_string+0x48>)
 800084a:	223a      	movs	r2, #58	@ 0x3a
 800084c:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <time_to_string+0x48>)
 8000850:	223a      	movs	r2, #58	@ 0x3a
 8000852:	715a      	strb	r2, [r3, #5]

	number_to_string(time->hours, buf);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	789b      	ldrb	r3, [r3, #2]
 8000858:	490b      	ldr	r1, [pc, #44]	@ (8000888 <time_to_string+0x48>)
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffb6 	bl	80007cc <number_to_string>
	number_to_string(time->minutes, &buf[3]);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	785b      	ldrb	r3, [r3, #1]
 8000864:	4909      	ldr	r1, [pc, #36]	@ (800088c <time_to_string+0x4c>)
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ffb0 	bl	80007cc <number_to_string>
	number_to_string(time->seconds, &buf[6]);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4907      	ldr	r1, [pc, #28]	@ (8000890 <time_to_string+0x50>)
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffaa 	bl	80007cc <number_to_string>

	buf[8] = '\0';
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <time_to_string+0x48>)
 800087a:	2200      	movs	r2, #0
 800087c:	721a      	strb	r2, [r3, #8]

	return buf;
 800087e:	4b02      	ldr	r3, [pc, #8]	@ (8000888 <time_to_string+0x48>)

}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000b4 	.word	0x200000b4
 800088c:	200000b7 	.word	0x200000b7
 8000890:	200000ba 	.word	0x200000ba

08000894 <date_to_string>:

char* date_to_string(RTC_Handle_date_t *date)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	// return format is "dd/mm/yy"
	static char buf[9];

	buf[2] = ':';
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <date_to_string+0x48>)
 800089e:	223a      	movs	r2, #58	@ 0x3a
 80008a0:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <date_to_string+0x48>)
 80008a4:	223a      	movs	r2, #58	@ 0x3a
 80008a6:	715a      	strb	r2, [r3, #5]

	number_to_string(date->date, buf);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	490b      	ldr	r1, [pc, #44]	@ (80008dc <date_to_string+0x48>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff8c 	bl	80007cc <number_to_string>
	number_to_string(date->month, &buf[3]);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	4909      	ldr	r1, [pc, #36]	@ (80008e0 <date_to_string+0x4c>)
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff86 	bl	80007cc <number_to_string>
	number_to_string(date->year, &buf[6]);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	4907      	ldr	r1, [pc, #28]	@ (80008e4 <date_to_string+0x50>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff80 	bl	80007cc <number_to_string>

	buf[8] = '\0';
 80008cc:	4b03      	ldr	r3, [pc, #12]	@ (80008dc <date_to_string+0x48>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	721a      	strb	r2, [r3, #8]

	return buf;
 80008d2:	4b02      	ldr	r3, [pc, #8]	@ (80008dc <date_to_string+0x48>)

}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000c0 	.word	0x200000c0
 80008e0:	200000c3 	.word	0x200000c3
 80008e4:	200000c6 	.word	0x200000c6

080008e8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <ITM_SendChar+0x44>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0d      	ldr	r2, [pc, #52]	@ (800092c <ITM_SendChar+0x44>)
 80008f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008fc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <ITM_SendChar+0x48>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a0b      	ldr	r2, [pc, #44]	@ (8000930 <ITM_SendChar+0x48>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800090a:	bf00      	nop
 800090c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f8      	beq.n	800090c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800091a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	6013      	str	r3, [r2, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	e000edfc 	.word	0xe000edfc
 8000930:	e0000e00 	.word	0xe0000e00

08000934 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e00a      	b.n	800095c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000946:	f3af 8000 	nop.w
 800094a:	4601      	mov	r1, r0
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	b2ca      	uxtb	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf0      	blt.n	8000946 <_read+0x12>
  }

  return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e009      	b.n	8000994 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ffad 	bl	80008e8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf1      	blt.n	8000980 <_write+0x12>
  }
  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_close>:

int _close(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009cc:	605a      	str	r2, [r3, #4]
  return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <_isatty>:

int _isatty(int file)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
	...

08000a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a10:	4a14      	ldr	r2, [pc, #80]	@ (8000a64 <_sbrk+0x5c>)
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <_sbrk+0x60>)
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <_sbrk+0x64>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <_sbrk+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d207      	bcs.n	8000a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a38:	f000 ffd6 	bl	80019e8 <__errno>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	220c      	movs	r2, #12
 8000a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	e009      	b.n	8000a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <_sbrk+0x64>)
 8000a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20020000 	.word	0x20020000
 8000a68:	00000400 	.word	0x00000400
 8000a6c:	200000cc 	.word	0x200000cc
 8000a70:	20000220 	.word	0x20000220

08000a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	@ (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a78:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	@ (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa2:	f000 ffa7 	bl	80019f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa6:	f7ff fdff 	bl	80006a8 <main>

08000aaa <LoopForever>:

LoopForever:
  b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ab8:	08002568 	.word	0x08002568
  ldr r2, =_sbss
 8000abc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ac0:	2000021c 	.word	0x2000021c

08000ac4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>

08000ac6 <I2C_ManageAcking>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d106      	bne.n	8000ae6 <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
	}
}
 8000ae4:	e008      	b.n	8000af8 <I2C_ManageAcking+0x32>
	else if(EnOrDi == DISABLE)
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d105      	bne.n	8000af8 <I2C_ManageAcking+0x32>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// check if device is master mode or slave mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d01f      	beq.n	8000b58 <I2C_ClearADDRFlag+0x56>
	{
		// device in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7f1b      	ldrb	r3, [r3, #28]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d112      	bne.n	8000b46 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d11f      	bne.n	8000b68 <I2C_ClearADDRFlag+0x66>
			{
				// disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ffc9 	bl	8000ac6 <I2C_ManageAcking>

				// clear ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR1;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}


}
 8000b44:	e010      	b.n	8000b68 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	60fb      	str	r3, [r7, #12]
}
 8000b56:	e007      	b.n	8000b68 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	60fb      	str	r3, [r7, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <I2C_PeripheralControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d106      	bne.n	8000b90 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f043 0201 	orr.w	r2, r3, #1
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	601a      	str	r2, [r3, #0]
	}
	else if(EnOrDi == DISABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
	}
}
 8000b8e:	e008      	b.n	8000ba2 <I2C_PeripheralControl+0x32>
	else if(EnOrDi == DISABLE)
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d105      	bne.n	8000ba2 <I2C_PeripheralControl+0x32>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f043 0201 	orr.w	r2, r3, #1
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <I2C_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ffd8 	bl	8000b70 <I2C_PeripheralControl>
	uint32_t tempreg = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
	//1. Configure the mode (Standard or fast)
	uint16_t ccr_value = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM_KHZ)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8000d04 <I2C_Init+0x158>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d80f      	bhi.n	8000bf6 <I2C_Init+0x4a>
	{
		// mode is standard
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000bd6:	f000 f9d1 	bl	8000f7c <RCC_GetPCLK1Value>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000be8:	897b      	ldrh	r3, [r7, #10]
 8000bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e02c      	b.n	8000c50 <I2C_Init+0xa4>
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << I2C_CCR_FS);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bfc:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	88db      	ldrh	r3, [r3, #6]
 8000c02:	039b      	lsls	r3, r3, #14
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_DUTYCYCLE_2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	88db      	ldrh	r3, [r3, #6]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10b      	bne.n	8000c2a <I2C_Init+0x7e>
		{
			// Tlow = 2*Thigh
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c12:	f000 f9b3 	bl	8000f7c <RCC_GetPCLK1Value>
 8000c16:	4601      	mov	r1, r0
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c26:	817b      	strh	r3, [r7, #10]
 8000c28:	e00c      	b.n	8000c44 <I2C_Init+0x98>

		}
		else
		{
			//  Tlow = 1.7*Thigh
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c2a:	f000 f9a7 	bl	8000f7c <RCC_GetPCLK1Value>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	009a      	lsls	r2, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c42:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c44:	897b      	ldrh	r3, [r7, #10]
 8000c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	61da      	str	r2, [r3, #28]

	//2. Configure the speed of the serial clock. Configure the FREQ field of CR2
	tempreg = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
	tempreg = RCC_GetPCLK1Value()/1000000U;
 8000c5c:	f000 f98e 	bl	8000f7c <RCC_GetPCLK1Value>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a29      	ldr	r2, [pc, #164]	@ (8000d08 <I2C_Init+0x15c>)
 8000c64:	fba2 2303 	umull	r2, r3, r2, r3
 8000c68:	0c9b      	lsrs	r3, r3, #18
 8000c6a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	6859      	ldr	r1, [r3, #4]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]

	//3. Configure the device address (if the device is behaving as slave)
	// configuring for only 7 bit mode
	tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	791b      	ldrb	r3, [r3, #4]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= (1 << 14);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000c96:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	609a      	str	r2, [r3, #8]

	//4. Enable the acking
	pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	6819      	ldr	r1, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	795b      	ldrb	r3, [r3, #5]
 8000caa:	029a      	lsls	r2, r3, #10
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]

	//5. Configure the rise time for I2C pins
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM_KHZ)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <I2C_Init+0x158>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d809      	bhi.n	8000cd2 <I2C_Init+0x126>
	{
		// mode is standard
		// here trsie = (Fclk * Trisemax) + 1.
		// For I2C, trisemax is 1000ns or 1microsecond and in frequency terms it is 1 MHz. Hence we are dividing with 1 MHz
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000cbe:	f000 f95d 	bl	8000f7c <RCC_GetPCLK1Value>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a10      	ldr	r2, [pc, #64]	@ (8000d08 <I2C_Init+0x15c>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	0c9b      	lsrs	r3, r3, #18
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	e00d      	b.n	8000cee <I2C_Init+0x142>
	}
	else
	{
		// mode is fast mode
		// trise max for fast mode is 300ns
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000cd2:	f000 f953 	bl	8000f7c <RCC_GetPCLK1Value>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	0a5b      	lsrs	r3, r3, #9
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <I2C_Init+0x160>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	09db      	lsrs	r3, r3, #7
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000cf8:	621a      	str	r2, [r3, #32]

	// CCR calculations


}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	000186a0 	.word	0x000186a0
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	00044b83 	.word	0x00044b83

08000d10 <I2C_GetFlagStatus>:
 *
 * @Note			-
 *
 *************************************************************************************************/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	if((pI2Cx->SR1 & FlagName) || (pI2Cx->SR2 & FlagName))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695a      	ldr	r2, [r3, #20]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <I2C_GetFlagStatus+0x22>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <I2C_GetFlagStatus+0x26>
	{
		return FLAG_SET;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <I2C_GetFlagStatus+0x28>
	}
	return FLAG_RESET;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <I2C_MasterSendData>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *TxBuffer, uint8_t len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	461a      	mov	r2, r3
 8000d50:	460b      	mov	r3, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the start condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d66:	601a      	str	r2, [r3, #0]

	// 2. Check if the start bit is set and then Read the SR1 register to clear the start bit
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_SR1_SB)));
 8000d68:	bf00      	nop
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ffcd 	bl	8000d10 <I2C_GetFlagStatus>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f6      	beq.n	8000d6a <I2C_MasterSendData+0x28>
	//uint32_t temp = pI2CHandle->pI2Cx->SR1;

	// 3. Send the address of slave with transmission byte (0)
	SlaveAddr = SlaveAddr << 1;
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	71bb      	strb	r3, [r7, #6]
	SlaveAddr &= ~(1);
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	f023 0301 	bic.w	r3, r3, #1
 8000d88:	71bb      	strb	r3, [r7, #6]
	pI2CHandle->pI2Cx->DR = SlaveAddr;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	79ba      	ldrb	r2, [r7, #6]
 8000d90:	611a      	str	r2, [r3, #16]

	// 4. ADDR bit is set if it receives an ACK
	if(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_ADDR)))
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2102      	movs	r1, #2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffb9 	bl	8000d10 <I2C_GetFlagStatus>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d017      	beq.n	8000dd4 <I2C_MasterSendData+0x92>
	{
		// The ADDR bit is set which means that the master received an ack. Now we should reset this ADDR bit
		// read SR1 and SR2 to clear this bit
		I2C_ClearADDRFlag(pI2CHandle);
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff feac 	bl	8000b02 <I2C_ClearADDRFlag>
	}

	// 5. Send data till len becomes zero. We don't have to check for ack every time as it is handled by the hardware
	while(len)
 8000daa:	e013      	b.n	8000dd4 <I2C_MasterSendData+0x92>
	{
		// wait till Txe is 1 indicating that DR is empty and ready to be filled with data
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_TxE))))
		{
			pI2CHandle->pI2Cx->DR = *TxBuffer;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	611a      	str	r2, [r3, #16]
			TxBuffer++;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
			len--;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	71fb      	strb	r3, [r7, #7]
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_TxE))))
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2180      	movs	r1, #128	@ 0x80
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ffa1 	bl	8000d10 <I2C_GetFlagStatus>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0eb      	beq.n	8000dac <I2C_MasterSendData+0x6a>
	while(len)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f3      	bne.n	8000dc2 <I2C_MasterSendData+0x80>
		}
	}

	// 6. Close the communication
	// 6.1 wait for Txe = 1 and BTF = 1 before generating the stop condition
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_TxE))));
 8000dda:	bf00      	nop
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2180      	movs	r1, #128	@ 0x80
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff94 	bl	8000d10 <I2C_GetFlagStatus>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f6      	beq.n	8000ddc <I2C_MasterSendData+0x9a>
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_BTF))));
 8000dee:	bf00      	nop
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2104      	movs	r1, #4
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff8a 	bl	8000d10 <I2C_GetFlagStatus>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f6      	beq.n	8000df0 <I2C_MasterSendData+0xae>

	// 6.2 Generate the stop condition (if repeated start isn't enabled)
	if(Sr == I2C_NO_SR)
 8000e02:	7e3b      	ldrb	r3, [r7, #24]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d107      	bne.n	8000e18 <I2C_MasterSendData+0xd6>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <I2C_MasterReceiveData>:
/*
 * I2C send and receive data
 */

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *RxBuffer, uint8_t len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	460b      	mov	r3, r1
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	4613      	mov	r3, r2
 8000e34:	71bb      	strb	r3, [r7, #6]
	uint32_t temp;
	// 1. Initiate the start condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e44:	601a      	str	r2, [r3, #0]

	// 2. Confirm if the start bit is set
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_SR1_SB)));
 8000e46:	bf00      	nop
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff5e 	bl	8000d10 <I2C_GetFlagStatus>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f6      	beq.n	8000e48 <I2C_MasterReceiveData+0x28>

	// 3. Send Address bit
	SlaveAddr = SlaveAddr << 1;
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	71bb      	strb	r3, [r7, #6]
	SlaveAddr |= 1;
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	71bb      	strb	r3, [r7, #6]
	pI2CHandle->pI2Cx->DR = SlaveAddr;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	79ba      	ldrb	r2, [r7, #6]
 8000e6e:	611a      	str	r2, [r3, #16]

	// 4. check if the ADDR flag is set. Wait until its set
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx,(1 << I2C_SR1_ADDR))));
 8000e70:	bf00      	nop
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2102      	movs	r1, #2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff49 	bl	8000d10 <I2C_GetFlagStatus>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f6      	beq.n	8000e72 <I2C_MasterReceiveData+0x52>

	// 5. Send data. If len = 1 or if len > 1
	if(len == 1)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d12c      	bne.n	8000ee4 <I2C_MasterReceiveData+0xc4>
	{
		// a. Disable ack
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e98:	601a      	str	r2, [r3, #0]

		// c. clear addr bit. Read SR1 followed by SR2
		I2C_ClearADDRFlag(pI2CHandle);
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f7ff fe31 	bl	8000b02 <I2C_ClearADDRFlag>

		// d. wait till RXNE is set
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, (1 << I2C_SR1_RxNE)));
 8000ea0:	bf00      	nop
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2140      	movs	r1, #64	@ 0x40
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff31 	bl	8000d10 <I2C_GetFlagStatus>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f6      	beq.n	8000ea2 <I2C_MasterReceiveData+0x82>

		// b. send stop condition if repeated start is disabled
		if(Sr == I2C_NO_SR)
 8000eb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d107      	bne.n	8000ecc <I2C_MasterReceiveData+0xac>
			pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000eca:	601a      	str	r2, [r3, #0]

		// e. Read the data from the data register
		*RxBuffer = pI2CHandle->pI2Cx->DR;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	701a      	strb	r2, [r3, #0]
		RxBuffer++;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3301      	adds	r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
		len--;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
	}
	if(len > 1 )
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d938      	bls.n	8000f5c <I2C_MasterReceiveData+0x13c>
	{
		// a. clear the address bit
		temp = pI2CHandle->pI2Cx->SR1;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	617b      	str	r3, [r7, #20]
		temp = pI2CHandle->pI2Cx->SR2;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	617b      	str	r3, [r7, #20]
		(void)temp;

		// b. receive data
		while(len > 0)
 8000efa:	e02c      	b.n	8000f56 <I2C_MasterReceiveData+0x136>
		{
			// d. wait till RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, (1 << I2C_SR1_RxNE)));
 8000efc:	bf00      	nop
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2140      	movs	r1, #64	@ 0x40
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff03 	bl	8000d10 <I2C_GetFlagStatus>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f6      	beq.n	8000efe <I2C_MasterReceiveData+0xde>

			if(len == 2)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d113      	bne.n	8000f3e <I2C_MasterReceiveData+0x11e>
			{
				// c. when len == 2,
				// c.1 clear ACK
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f24:	601a      	str	r2, [r3, #0]

				// c.2 set STOP condition if repeated start is disabled
				if(Sr == I2C_NO_SR)
 8000f26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d107      	bne.n	8000f3e <I2C_MasterReceiveData+0x11e>
					pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f3c:	601a      	str	r2, [r3, #0]
			}

			*RxBuffer = pI2CHandle->pI2Cx->DR;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	701a      	strb	r2, [r3, #0]

			len--;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	71fb      	strb	r3, [r7, #7]
			RxBuffer++;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
		while(len > 0)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1cf      	bne.n	8000efc <I2C_MasterReceiveData+0xdc>
		}

	}

	// 7. Renable acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACKCTRL_ACK_EN)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d107      	bne.n	8000f74 <I2C_MasterReceiveData+0x154>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f72:	601a      	str	r2, [r3, #0]

}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000f82:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <RCC_GetPCLK1Value+0x9c>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000f90:	7a7b      	ldrb	r3, [r7, #9]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <RCC_GetPCLK1Value+0xa0>)
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e00b      	b.n	8000fb4 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000f9c:	7a7b      	ldrb	r3, [r7, #9]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d102      	bne.n	8000fa8 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <RCC_GetPCLK1Value+0xa4>)
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e005      	b.n	8000fb4 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000fa8:	7a7b      	ldrb	r3, [r7, #9]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d102      	bne.n	8000fb4 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000fae:	f000 f83d 	bl	800102c <RCC_GetPLLOutputClock>
 8000fb2:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000fb4:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <RCC_GetPCLK1Value+0x9c>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000fc2:	7a3b      	ldrb	r3, [r7, #8]
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	d802      	bhi.n	8000fce <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	72fb      	strb	r3, [r7, #11]
 8000fcc:	e005      	b.n	8000fda <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000fce:	7a3b      	ldrb	r3, [r7, #8]
 8000fd0:	3b08      	subs	r3, #8
 8000fd2:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <RCC_GetPCLK1Value+0xa8>)
 8000fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd8:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <RCC_GetPCLK1Value+0x9c>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	0a9b      	lsrs	r3, r3, #10
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000fe8:	7a3b      	ldrb	r3, [r7, #8]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d802      	bhi.n	8000ff4 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	72bb      	strb	r3, [r7, #10]
 8000ff2:	e004      	b.n	8000ffe <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000ff4:	7a3b      	ldrb	r3, [r7, #8]
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <RCC_GetPCLK1Value+0xac>)
 8000ffa:	5cd3      	ldrb	r3, [r2, r3]
 8000ffc:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000ffe:	7afb      	ldrb	r3, [r7, #11]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	fbb2 f2f3 	udiv	r2, r2, r3
 8001006:	7abb      	ldrb	r3, [r7, #10]
 8001008:	fbb2 f3f3 	udiv	r3, r2, r3
 800100c:	607b      	str	r3, [r7, #4]

	return pclk1;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	00f42400 	.word	0x00f42400
 8001020:	007a1200 	.word	0x007a1200
 8001024:	20000000 	.word	0x20000000
 8001028:	20000010 	.word	0x20000010

0800102c <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

	return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
	...

0800103c <GPIO_ClockControl>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d162      	bne.n	8001114 <GPIO_ClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a64      	ldr	r2, [pc, #400]	@ (80011e4 <GPIO_ClockControl+0x1a8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d106      	bne.n	8001064 <GPIO_ClockControl+0x28>
		{
			GPIOA_CLK_EN();
 8001056:	4b64      	ldr	r3, [pc, #400]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a63      	ldr	r2, [pc, #396]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_CLK_DI();
		}
	}
}
 8001062:	e0b9      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a61      	ldr	r2, [pc, #388]	@ (80011ec <GPIO_ClockControl+0x1b0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d106      	bne.n	800107a <GPIO_ClockControl+0x3e>
			GPIOB_CLK_EN();
 800106c:	4b5e      	ldr	r3, [pc, #376]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001070:	4a5d      	ldr	r2, [pc, #372]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001078:	e0ae      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a5c      	ldr	r2, [pc, #368]	@ (80011f0 <GPIO_ClockControl+0x1b4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d106      	bne.n	8001090 <GPIO_ClockControl+0x54>
			GPIOC_CLK_EN();
 8001082:	4b59      	ldr	r3, [pc, #356]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a58      	ldr	r2, [pc, #352]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800108e:	e0a3      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a58      	ldr	r2, [pc, #352]	@ (80011f4 <GPIO_ClockControl+0x1b8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d106      	bne.n	80010a6 <GPIO_ClockControl+0x6a>
			GPIOD_CLK_EN();
 8001098:	4b53      	ldr	r3, [pc, #332]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	4a52      	ldr	r2, [pc, #328]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010a4:	e098      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a53      	ldr	r2, [pc, #332]	@ (80011f8 <GPIO_ClockControl+0x1bc>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d106      	bne.n	80010bc <GPIO_ClockControl+0x80>
			GPIOE_CLK_EN();
 80010ae:	4b4e      	ldr	r3, [pc, #312]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a4d      	ldr	r2, [pc, #308]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80010b4:	f043 0310 	orr.w	r3, r3, #16
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010ba:	e08d      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a4f      	ldr	r2, [pc, #316]	@ (80011fc <GPIO_ClockControl+0x1c0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d106      	bne.n	80010d2 <GPIO_ClockControl+0x96>
			GPIOF_CLK_EN();
 80010c4:	4b48      	ldr	r3, [pc, #288]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c8:	4a47      	ldr	r2, [pc, #284]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80010ca:	f043 0320 	orr.w	r3, r3, #32
 80010ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010d0:	e082      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001200 <GPIO_ClockControl+0x1c4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d106      	bne.n	80010e8 <GPIO_ClockControl+0xac>
			GPIOG_CLK_EN();
 80010da:	4b43      	ldr	r3, [pc, #268]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a42      	ldr	r2, [pc, #264]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80010e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010e6:	e077      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a46      	ldr	r2, [pc, #280]	@ (8001204 <GPIO_ClockControl+0x1c8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d106      	bne.n	80010fe <GPIO_ClockControl+0xc2>
			GPIOH_CLK_EN();
 80010f0:	4b3d      	ldr	r3, [pc, #244]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f4:	4a3c      	ldr	r2, [pc, #240]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80010f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80010fc:	e06c      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a41      	ldr	r2, [pc, #260]	@ (8001208 <GPIO_ClockControl+0x1cc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d168      	bne.n	80011d8 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_EN();
 8001106:	4b38      	ldr	r3, [pc, #224]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a37      	ldr	r2, [pc, #220]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001112:	e061      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a33      	ldr	r2, [pc, #204]	@ (80011e4 <GPIO_ClockControl+0x1a8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d106      	bne.n	800112a <GPIO_ClockControl+0xee>
			GPIOA_CLK_DI();
 800111c:	4b32      	ldr	r3, [pc, #200]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001120:	4a31      	ldr	r2, [pc, #196]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001128:	e056      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a2f      	ldr	r2, [pc, #188]	@ (80011ec <GPIO_ClockControl+0x1b0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d106      	bne.n	8001140 <GPIO_ClockControl+0x104>
			GPIOB_CLK_DI();
 8001132:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a2c      	ldr	r2, [pc, #176]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001138:	f023 0302 	bic.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800113e:	e04b      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a2b      	ldr	r2, [pc, #172]	@ (80011f0 <GPIO_ClockControl+0x1b4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d106      	bne.n	8001156 <GPIO_ClockControl+0x11a>
			GPIOC_CLK_DI();
 8001148:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a26      	ldr	r2, [pc, #152]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800114e:	f023 0304 	bic.w	r3, r3, #4
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001154:	e040      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a26      	ldr	r2, [pc, #152]	@ (80011f4 <GPIO_ClockControl+0x1b8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d106      	bne.n	800116c <GPIO_ClockControl+0x130>
			GPIOD_CLK_DI();
 800115e:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a21      	ldr	r2, [pc, #132]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001164:	f023 0308 	bic.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800116a:	e035      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a22      	ldr	r2, [pc, #136]	@ (80011f8 <GPIO_ClockControl+0x1bc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d106      	bne.n	8001182 <GPIO_ClockControl+0x146>
			GPIOE_CLK_DI();
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001178:	4a1b      	ldr	r2, [pc, #108]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800117a:	f023 0310 	bic.w	r3, r3, #16
 800117e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001180:	e02a      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <GPIO_ClockControl+0x1c0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d106      	bne.n	8001198 <GPIO_ClockControl+0x15c>
			GPIOF_CLK_DI();
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a16      	ldr	r2, [pc, #88]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 8001190:	f023 0320 	bic.w	r3, r3, #32
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001196:	e01f      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <GPIO_ClockControl+0x1c4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d106      	bne.n	80011ae <GPIO_ClockControl+0x172>
			GPIOG_CLK_DI();
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	4a10      	ldr	r2, [pc, #64]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80011a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80011ac:	e014      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <GPIO_ClockControl+0x1c8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d106      	bne.n	80011c4 <GPIO_ClockControl+0x188>
			GPIOH_CLK_DI();
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80011bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80011c2:	e009      	b.n	80011d8 <GPIO_ClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a10      	ldr	r2, [pc, #64]	@ (8001208 <GPIO_ClockControl+0x1cc>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d105      	bne.n	80011d8 <GPIO_ClockControl+0x19c>
			GPIOI_CLK_DI();
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d0:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <GPIO_ClockControl+0x1ac>)
 80011d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40021c00 	.word	0x40021c00
 8001208:	40022000 	.word	0x40022000

0800120c <GPIO_Init>:
 *
 * @Note			-
 *
 *************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	GPIO_ClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff0e 	bl	800103c <GPIO_ClockControl>

	uint32_t temp = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	795b      	ldrb	r3, [r3, #5]
 8001228:	2b03      	cmp	r3, #3
 800122a:	d820      	bhi.n	800126e <GPIO_Init+0x62>
	{
		// Non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	795b      	ldrb	r3, [r3, #5]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2103      	movs	r1, #3
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	400a      	ands	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6819      	ldr	r1, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e0c3      	b.n	80013f6 <GPIO_Init+0x1ea>
	}
	else
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2103      	movs	r1, #3
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	400a      	ands	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	795b      	ldrb	r3, [r3, #5]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d117      	bne.n	80012c4 <GPIO_Init+0xb8>
		{
			// 1. Configure the FTSR
			// first we clear the corresponding RTSR bit so that we only have FTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001294:	4b96      	ldr	r3, [pc, #600]	@ (80014f0 <GPIO_Init+0x2e4>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	7912      	ldrb	r2, [r2, #4]
 800129c:	4611      	mov	r1, r2
 800129e:	2201      	movs	r2, #1
 80012a0:	408a      	lsls	r2, r1
 80012a2:	43d2      	mvns	r2, r2
 80012a4:	4611      	mov	r1, r2
 80012a6:	4a92      	ldr	r2, [pc, #584]	@ (80014f0 <GPIO_Init+0x2e4>)
 80012a8:	400b      	ands	r3, r1
 80012aa:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80012ac:	4b90      	ldr	r3, [pc, #576]	@ (80014f0 <GPIO_Init+0x2e4>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	7912      	ldrb	r2, [r2, #4]
 80012b4:	4611      	mov	r1, r2
 80012b6:	2201      	movs	r2, #1
 80012b8:	408a      	lsls	r2, r1
 80012ba:	4611      	mov	r1, r2
 80012bc:	4a8c      	ldr	r2, [pc, #560]	@ (80014f0 <GPIO_Init+0x2e4>)
 80012be:	430b      	orrs	r3, r1
 80012c0:	60d3      	str	r3, [r2, #12]
 80012c2:	e035      	b.n	8001330 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	795b      	ldrb	r3, [r3, #5]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d117      	bne.n	80012fc <GPIO_Init+0xf0>
		{
			// 1. Configure the RTSR
			// first we clear the corresponding FTSR bit so that we only have RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80012cc:	4b88      	ldr	r3, [pc, #544]	@ (80014f0 <GPIO_Init+0x2e4>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	7912      	ldrb	r2, [r2, #4]
 80012d4:	4611      	mov	r1, r2
 80012d6:	2201      	movs	r2, #1
 80012d8:	408a      	lsls	r2, r1
 80012da:	43d2      	mvns	r2, r2
 80012dc:	4611      	mov	r1, r2
 80012de:	4a84      	ldr	r2, [pc, #528]	@ (80014f0 <GPIO_Init+0x2e4>)
 80012e0:	400b      	ands	r3, r1
 80012e2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80012e4:	4b82      	ldr	r3, [pc, #520]	@ (80014f0 <GPIO_Init+0x2e4>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	7912      	ldrb	r2, [r2, #4]
 80012ec:	4611      	mov	r1, r2
 80012ee:	2201      	movs	r2, #1
 80012f0:	408a      	lsls	r2, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	4a7e      	ldr	r2, [pc, #504]	@ (80014f0 <GPIO_Init+0x2e4>)
 80012f6:	430b      	orrs	r3, r1
 80012f8:	6093      	str	r3, [r2, #8]
 80012fa:	e019      	b.n	8001330 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	795b      	ldrb	r3, [r3, #5]
 8001300:	2b06      	cmp	r3, #6
 8001302:	d115      	bne.n	8001330 <GPIO_Init+0x124>
		{
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001304:	4b7a      	ldr	r3, [pc, #488]	@ (80014f0 <GPIO_Init+0x2e4>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	7912      	ldrb	r2, [r2, #4]
 800130c:	4611      	mov	r1, r2
 800130e:	2201      	movs	r2, #1
 8001310:	408a      	lsls	r2, r1
 8001312:	4611      	mov	r1, r2
 8001314:	4a76      	ldr	r2, [pc, #472]	@ (80014f0 <GPIO_Init+0x2e4>)
 8001316:	430b      	orrs	r3, r1
 8001318:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800131a:	4b75      	ldr	r3, [pc, #468]	@ (80014f0 <GPIO_Init+0x2e4>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	4611      	mov	r1, r2
 8001324:	2201      	movs	r2, #1
 8001326:	408a      	lsls	r2, r1
 8001328:	4611      	mov	r1, r2
 800132a:	4a71      	ldr	r2, [pc, #452]	@ (80014f0 <GPIO_Init+0x2e4>)
 800132c:	430b      	orrs	r3, r1
 800132e:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		// Calculate the register number EXTICR1/EXTICR2/EXTICR3/EXTICR4
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	791b      	ldrb	r3, [r3, #4]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	b2db      	uxtb	r3, r3
 8001338:	617b      	str	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6d      	ldr	r2, [pc, #436]	@ (80014f4 <GPIO_Init+0x2e8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d039      	beq.n	80013b8 <GPIO_Init+0x1ac>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a6b      	ldr	r2, [pc, #428]	@ (80014f8 <GPIO_Init+0x2ec>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d032      	beq.n	80013b4 <GPIO_Init+0x1a8>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6a      	ldr	r2, [pc, #424]	@ (80014fc <GPIO_Init+0x2f0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d02b      	beq.n	80013b0 <GPIO_Init+0x1a4>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a68      	ldr	r2, [pc, #416]	@ (8001500 <GPIO_Init+0x2f4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d024      	beq.n	80013ac <GPIO_Init+0x1a0>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a67      	ldr	r2, [pc, #412]	@ (8001504 <GPIO_Init+0x2f8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d01d      	beq.n	80013a8 <GPIO_Init+0x19c>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a65      	ldr	r2, [pc, #404]	@ (8001508 <GPIO_Init+0x2fc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d016      	beq.n	80013a4 <GPIO_Init+0x198>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a64      	ldr	r2, [pc, #400]	@ (800150c <GPIO_Init+0x300>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d00f      	beq.n	80013a0 <GPIO_Init+0x194>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a62      	ldr	r2, [pc, #392]	@ (8001510 <GPIO_Init+0x304>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d008      	beq.n	800139c <GPIO_Init+0x190>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a61      	ldr	r2, [pc, #388]	@ (8001514 <GPIO_Init+0x308>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <GPIO_Init+0x18c>
 8001394:	2308      	movs	r3, #8
 8001396:	e010      	b.n	80013ba <GPIO_Init+0x1ae>
 8001398:	2300      	movs	r3, #0
 800139a:	e00e      	b.n	80013ba <GPIO_Init+0x1ae>
 800139c:	2307      	movs	r3, #7
 800139e:	e00c      	b.n	80013ba <GPIO_Init+0x1ae>
 80013a0:	2306      	movs	r3, #6
 80013a2:	e00a      	b.n	80013ba <GPIO_Init+0x1ae>
 80013a4:	2305      	movs	r3, #5
 80013a6:	e008      	b.n	80013ba <GPIO_Init+0x1ae>
 80013a8:	2304      	movs	r3, #4
 80013aa:	e006      	b.n	80013ba <GPIO_Init+0x1ae>
 80013ac:	2303      	movs	r3, #3
 80013ae:	e004      	b.n	80013ba <GPIO_Init+0x1ae>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e002      	b.n	80013ba <GPIO_Init+0x1ae>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <GPIO_Init+0x1ae>
 80013b8:	2300      	movs	r3, #0
 80013ba:	74fb      	strb	r3, [r7, #19]
		SYSCFG_CLK_EN();
 80013bc:	4b56      	ldr	r3, [pc, #344]	@ (8001518 <GPIO_Init+0x30c>)
 80013be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c0:	4a55      	ldr	r2, [pc, #340]	@ (8001518 <GPIO_Init+0x30c>)
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp] |= (portcode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4));
 80013c8:	4a54      	ldr	r2, [pc, #336]	@ (800151c <GPIO_Init+0x310>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3302      	adds	r3, #2
 80013ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013d2:	7cfb      	ldrb	r3, [r7, #19]
 80013d4:	4951      	ldr	r1, [pc, #324]	@ (800151c <GPIO_Init+0x310>)
 80013d6:	431a      	orrs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3302      	adds	r3, #2
 80013dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80013e0:	4b43      	ldr	r3, [pc, #268]	@ (80014f0 <GPIO_Init+0x2e4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	7912      	ldrb	r2, [r2, #4]
 80013e8:	4611      	mov	r1, r2
 80013ea:	2201      	movs	r2, #1
 80013ec:	408a      	lsls	r2, r1
 80013ee:	4611      	mov	r1, r2
 80013f0:	4a3f      	ldr	r2, [pc, #252]	@ (80014f0 <GPIO_Init+0x2e4>)
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6013      	str	r3, [r2, #0]

	}

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	799b      	ldrb	r3, [r3, #6]
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2103      	movs	r1, #3
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	4619      	mov	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	400a      	ands	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6899      	ldr	r1, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	430a      	orrs	r2, r1
 8001434:	609a      	str	r2, [r3, #8]

	// 3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	79db      	ldrb	r3, [r3, #7]
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	791b      	ldrb	r3, [r3, #4]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	791b      	ldrb	r3, [r3, #4]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2103      	movs	r1, #3
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	4619      	mov	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	400a      	ands	r2, r1
 8001464:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68d9      	ldr	r1, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	430a      	orrs	r2, r1
 8001474:	60da      	str	r2, [r3, #12]

	// 4. Conigure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7a1b      	ldrb	r3, [r3, #8]
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	791b      	ldrb	r3, [r3, #4]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	400a      	ands	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6859      	ldr	r1, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	605a      	str	r2, [r3, #4]

	// 5. configure the alt function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	795b      	ldrb	r3, [r3, #5]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d139      	bne.n	8001530 <GPIO_Init+0x324>
	{
		uint32_t pinpos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	60fb      	str	r3, [r7, #12]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pinpos));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7a5b      	ldrb	r3, [r3, #9]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_7)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	2b07      	cmp	r3, #7
 80014dc:	d820      	bhi.n	8001520 <GPIO_Init+0x314>
		{
			// use AFL

			pGPIOHandle->pGPIOx->AFRL |= temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a19      	ldr	r1, [r3, #32]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	621a      	str	r2, [r3, #32]
		{
			// use AFH
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 80014ee:	e01f      	b.n	8001530 <GPIO_Init+0x324>
 80014f0:	40013c00 	.word	0x40013c00
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40021400 	.word	0x40021400
 800150c:	40021800 	.word	0x40021800
 8001510:	40021c00 	.word	0x40021c00
 8001514:	40022000 	.word	0x40022000
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	430a      	orrs	r2, r1
 800152e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <std>:
 8001538:	2300      	movs	r3, #0
 800153a:	b510      	push	{r4, lr}
 800153c:	4604      	mov	r4, r0
 800153e:	e9c0 3300 	strd	r3, r3, [r0]
 8001542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001546:	6083      	str	r3, [r0, #8]
 8001548:	8181      	strh	r1, [r0, #12]
 800154a:	6643      	str	r3, [r0, #100]	@ 0x64
 800154c:	81c2      	strh	r2, [r0, #14]
 800154e:	6183      	str	r3, [r0, #24]
 8001550:	4619      	mov	r1, r3
 8001552:	2208      	movs	r2, #8
 8001554:	305c      	adds	r0, #92	@ 0x5c
 8001556:	f000 f9f9 	bl	800194c <memset>
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <std+0x58>)
 800155c:	6263      	str	r3, [r4, #36]	@ 0x24
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <std+0x5c>)
 8001560:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <std+0x60>)
 8001564:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001566:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <std+0x64>)
 8001568:	6323      	str	r3, [r4, #48]	@ 0x30
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <std+0x68>)
 800156c:	6224      	str	r4, [r4, #32]
 800156e:	429c      	cmp	r4, r3
 8001570:	d006      	beq.n	8001580 <std+0x48>
 8001572:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001576:	4294      	cmp	r4, r2
 8001578:	d002      	beq.n	8001580 <std+0x48>
 800157a:	33d0      	adds	r3, #208	@ 0xd0
 800157c:	429c      	cmp	r4, r3
 800157e:	d105      	bne.n	800158c <std+0x54>
 8001580:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001588:	f000 ba58 	b.w	8001a3c <__retarget_lock_init_recursive>
 800158c:	bd10      	pop	{r4, pc}
 800158e:	bf00      	nop
 8001590:	0800179d 	.word	0x0800179d
 8001594:	080017bf 	.word	0x080017bf
 8001598:	080017f7 	.word	0x080017f7
 800159c:	0800181b 	.word	0x0800181b
 80015a0:	200000d0 	.word	0x200000d0

080015a4 <stdio_exit_handler>:
 80015a4:	4a02      	ldr	r2, [pc, #8]	@ (80015b0 <stdio_exit_handler+0xc>)
 80015a6:	4903      	ldr	r1, [pc, #12]	@ (80015b4 <stdio_exit_handler+0x10>)
 80015a8:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <stdio_exit_handler+0x14>)
 80015aa:	f000 b869 	b.w	8001680 <_fwalk_sglue>
 80015ae:	bf00      	nop
 80015b0:	20000014 	.word	0x20000014
 80015b4:	080022d1 	.word	0x080022d1
 80015b8:	20000024 	.word	0x20000024

080015bc <cleanup_stdio>:
 80015bc:	6841      	ldr	r1, [r0, #4]
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <cleanup_stdio+0x34>)
 80015c0:	4299      	cmp	r1, r3
 80015c2:	b510      	push	{r4, lr}
 80015c4:	4604      	mov	r4, r0
 80015c6:	d001      	beq.n	80015cc <cleanup_stdio+0x10>
 80015c8:	f000 fe82 	bl	80022d0 <_fflush_r>
 80015cc:	68a1      	ldr	r1, [r4, #8]
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <cleanup_stdio+0x38>)
 80015d0:	4299      	cmp	r1, r3
 80015d2:	d002      	beq.n	80015da <cleanup_stdio+0x1e>
 80015d4:	4620      	mov	r0, r4
 80015d6:	f000 fe7b 	bl	80022d0 <_fflush_r>
 80015da:	68e1      	ldr	r1, [r4, #12]
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <cleanup_stdio+0x3c>)
 80015de:	4299      	cmp	r1, r3
 80015e0:	d004      	beq.n	80015ec <cleanup_stdio+0x30>
 80015e2:	4620      	mov	r0, r4
 80015e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015e8:	f000 be72 	b.w	80022d0 <_fflush_r>
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	bf00      	nop
 80015f0:	200000d0 	.word	0x200000d0
 80015f4:	20000138 	.word	0x20000138
 80015f8:	200001a0 	.word	0x200001a0

080015fc <global_stdio_init.part.0>:
 80015fc:	b510      	push	{r4, lr}
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <global_stdio_init.part.0+0x30>)
 8001600:	4c0b      	ldr	r4, [pc, #44]	@ (8001630 <global_stdio_init.part.0+0x34>)
 8001602:	4a0c      	ldr	r2, [pc, #48]	@ (8001634 <global_stdio_init.part.0+0x38>)
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	4620      	mov	r0, r4
 8001608:	2200      	movs	r2, #0
 800160a:	2104      	movs	r1, #4
 800160c:	f7ff ff94 	bl	8001538 <std>
 8001610:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001614:	2201      	movs	r2, #1
 8001616:	2109      	movs	r1, #9
 8001618:	f7ff ff8e 	bl	8001538 <std>
 800161c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001620:	2202      	movs	r2, #2
 8001622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001626:	2112      	movs	r1, #18
 8001628:	f7ff bf86 	b.w	8001538 <std>
 800162c:	20000208 	.word	0x20000208
 8001630:	200000d0 	.word	0x200000d0
 8001634:	080015a5 	.word	0x080015a5

08001638 <__sfp_lock_acquire>:
 8001638:	4801      	ldr	r0, [pc, #4]	@ (8001640 <__sfp_lock_acquire+0x8>)
 800163a:	f000 ba00 	b.w	8001a3e <__retarget_lock_acquire_recursive>
 800163e:	bf00      	nop
 8001640:	20000211 	.word	0x20000211

08001644 <__sfp_lock_release>:
 8001644:	4801      	ldr	r0, [pc, #4]	@ (800164c <__sfp_lock_release+0x8>)
 8001646:	f000 b9fb 	b.w	8001a40 <__retarget_lock_release_recursive>
 800164a:	bf00      	nop
 800164c:	20000211 	.word	0x20000211

08001650 <__sinit>:
 8001650:	b510      	push	{r4, lr}
 8001652:	4604      	mov	r4, r0
 8001654:	f7ff fff0 	bl	8001638 <__sfp_lock_acquire>
 8001658:	6a23      	ldr	r3, [r4, #32]
 800165a:	b11b      	cbz	r3, 8001664 <__sinit+0x14>
 800165c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001660:	f7ff bff0 	b.w	8001644 <__sfp_lock_release>
 8001664:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <__sinit+0x28>)
 8001666:	6223      	str	r3, [r4, #32]
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <__sinit+0x2c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f5      	bne.n	800165c <__sinit+0xc>
 8001670:	f7ff ffc4 	bl	80015fc <global_stdio_init.part.0>
 8001674:	e7f2      	b.n	800165c <__sinit+0xc>
 8001676:	bf00      	nop
 8001678:	080015bd 	.word	0x080015bd
 800167c:	20000208 	.word	0x20000208

08001680 <_fwalk_sglue>:
 8001680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001684:	4607      	mov	r7, r0
 8001686:	4688      	mov	r8, r1
 8001688:	4614      	mov	r4, r2
 800168a:	2600      	movs	r6, #0
 800168c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001690:	f1b9 0901 	subs.w	r9, r9, #1
 8001694:	d505      	bpl.n	80016a2 <_fwalk_sglue+0x22>
 8001696:	6824      	ldr	r4, [r4, #0]
 8001698:	2c00      	cmp	r4, #0
 800169a:	d1f7      	bne.n	800168c <_fwalk_sglue+0xc>
 800169c:	4630      	mov	r0, r6
 800169e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016a2:	89ab      	ldrh	r3, [r5, #12]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d907      	bls.n	80016b8 <_fwalk_sglue+0x38>
 80016a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016ac:	3301      	adds	r3, #1
 80016ae:	d003      	beq.n	80016b8 <_fwalk_sglue+0x38>
 80016b0:	4629      	mov	r1, r5
 80016b2:	4638      	mov	r0, r7
 80016b4:	47c0      	blx	r8
 80016b6:	4306      	orrs	r6, r0
 80016b8:	3568      	adds	r5, #104	@ 0x68
 80016ba:	e7e9      	b.n	8001690 <_fwalk_sglue+0x10>

080016bc <iprintf>:
 80016bc:	b40f      	push	{r0, r1, r2, r3}
 80016be:	b507      	push	{r0, r1, r2, lr}
 80016c0:	4906      	ldr	r1, [pc, #24]	@ (80016dc <iprintf+0x20>)
 80016c2:	ab04      	add	r3, sp, #16
 80016c4:	6808      	ldr	r0, [r1, #0]
 80016c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80016ca:	6881      	ldr	r1, [r0, #8]
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	f000 fad9 	bl	8001c84 <_vfiprintf_r>
 80016d2:	b003      	add	sp, #12
 80016d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80016d8:	b004      	add	sp, #16
 80016da:	4770      	bx	lr
 80016dc:	20000020 	.word	0x20000020

080016e0 <_puts_r>:
 80016e0:	6a03      	ldr	r3, [r0, #32]
 80016e2:	b570      	push	{r4, r5, r6, lr}
 80016e4:	6884      	ldr	r4, [r0, #8]
 80016e6:	4605      	mov	r5, r0
 80016e8:	460e      	mov	r6, r1
 80016ea:	b90b      	cbnz	r3, 80016f0 <_puts_r+0x10>
 80016ec:	f7ff ffb0 	bl	8001650 <__sinit>
 80016f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80016f2:	07db      	lsls	r3, r3, #31
 80016f4:	d405      	bmi.n	8001702 <_puts_r+0x22>
 80016f6:	89a3      	ldrh	r3, [r4, #12]
 80016f8:	0598      	lsls	r0, r3, #22
 80016fa:	d402      	bmi.n	8001702 <_puts_r+0x22>
 80016fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016fe:	f000 f99e 	bl	8001a3e <__retarget_lock_acquire_recursive>
 8001702:	89a3      	ldrh	r3, [r4, #12]
 8001704:	0719      	lsls	r1, r3, #28
 8001706:	d502      	bpl.n	800170e <_puts_r+0x2e>
 8001708:	6923      	ldr	r3, [r4, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d135      	bne.n	800177a <_puts_r+0x9a>
 800170e:	4621      	mov	r1, r4
 8001710:	4628      	mov	r0, r5
 8001712:	f000 f8c5 	bl	80018a0 <__swsetup_r>
 8001716:	b380      	cbz	r0, 800177a <_puts_r+0x9a>
 8001718:	f04f 35ff 	mov.w	r5, #4294967295
 800171c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800171e:	07da      	lsls	r2, r3, #31
 8001720:	d405      	bmi.n	800172e <_puts_r+0x4e>
 8001722:	89a3      	ldrh	r3, [r4, #12]
 8001724:	059b      	lsls	r3, r3, #22
 8001726:	d402      	bmi.n	800172e <_puts_r+0x4e>
 8001728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800172a:	f000 f989 	bl	8001a40 <__retarget_lock_release_recursive>
 800172e:	4628      	mov	r0, r5
 8001730:	bd70      	pop	{r4, r5, r6, pc}
 8001732:	2b00      	cmp	r3, #0
 8001734:	da04      	bge.n	8001740 <_puts_r+0x60>
 8001736:	69a2      	ldr	r2, [r4, #24]
 8001738:	429a      	cmp	r2, r3
 800173a:	dc17      	bgt.n	800176c <_puts_r+0x8c>
 800173c:	290a      	cmp	r1, #10
 800173e:	d015      	beq.n	800176c <_puts_r+0x8c>
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	6022      	str	r2, [r4, #0]
 8001746:	7019      	strb	r1, [r3, #0]
 8001748:	68a3      	ldr	r3, [r4, #8]
 800174a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800174e:	3b01      	subs	r3, #1
 8001750:	60a3      	str	r3, [r4, #8]
 8001752:	2900      	cmp	r1, #0
 8001754:	d1ed      	bne.n	8001732 <_puts_r+0x52>
 8001756:	2b00      	cmp	r3, #0
 8001758:	da11      	bge.n	800177e <_puts_r+0x9e>
 800175a:	4622      	mov	r2, r4
 800175c:	210a      	movs	r1, #10
 800175e:	4628      	mov	r0, r5
 8001760:	f000 f85f 	bl	8001822 <__swbuf_r>
 8001764:	3001      	adds	r0, #1
 8001766:	d0d7      	beq.n	8001718 <_puts_r+0x38>
 8001768:	250a      	movs	r5, #10
 800176a:	e7d7      	b.n	800171c <_puts_r+0x3c>
 800176c:	4622      	mov	r2, r4
 800176e:	4628      	mov	r0, r5
 8001770:	f000 f857 	bl	8001822 <__swbuf_r>
 8001774:	3001      	adds	r0, #1
 8001776:	d1e7      	bne.n	8001748 <_puts_r+0x68>
 8001778:	e7ce      	b.n	8001718 <_puts_r+0x38>
 800177a:	3e01      	subs	r6, #1
 800177c:	e7e4      	b.n	8001748 <_puts_r+0x68>
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	6022      	str	r2, [r4, #0]
 8001784:	220a      	movs	r2, #10
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e7ee      	b.n	8001768 <_puts_r+0x88>
	...

0800178c <puts>:
 800178c:	4b02      	ldr	r3, [pc, #8]	@ (8001798 <puts+0xc>)
 800178e:	4601      	mov	r1, r0
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f7ff bfa5 	b.w	80016e0 <_puts_r>
 8001796:	bf00      	nop
 8001798:	20000020 	.word	0x20000020

0800179c <__sread>:
 800179c:	b510      	push	{r4, lr}
 800179e:	460c      	mov	r4, r1
 80017a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a4:	f000 f8fc 	bl	80019a0 <_read_r>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	bfab      	itete	ge
 80017ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80017ae:	89a3      	ldrhlt	r3, [r4, #12]
 80017b0:	181b      	addge	r3, r3, r0
 80017b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80017b6:	bfac      	ite	ge
 80017b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80017ba:	81a3      	strhlt	r3, [r4, #12]
 80017bc:	bd10      	pop	{r4, pc}

080017be <__swrite>:
 80017be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c2:	461f      	mov	r7, r3
 80017c4:	898b      	ldrh	r3, [r1, #12]
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	4605      	mov	r5, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	4616      	mov	r6, r2
 80017ce:	d505      	bpl.n	80017dc <__swrite+0x1e>
 80017d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017d4:	2302      	movs	r3, #2
 80017d6:	2200      	movs	r2, #0
 80017d8:	f000 f8d0 	bl	800197c <_lseek_r>
 80017dc:	89a3      	ldrh	r3, [r4, #12]
 80017de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017e6:	81a3      	strh	r3, [r4, #12]
 80017e8:	4632      	mov	r2, r6
 80017ea:	463b      	mov	r3, r7
 80017ec:	4628      	mov	r0, r5
 80017ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017f2:	f000 b8e7 	b.w	80019c4 <_write_r>

080017f6 <__sseek>:
 80017f6:	b510      	push	{r4, lr}
 80017f8:	460c      	mov	r4, r1
 80017fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017fe:	f000 f8bd 	bl	800197c <_lseek_r>
 8001802:	1c43      	adds	r3, r0, #1
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	bf15      	itete	ne
 8001808:	6560      	strne	r0, [r4, #84]	@ 0x54
 800180a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800180e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001812:	81a3      	strheq	r3, [r4, #12]
 8001814:	bf18      	it	ne
 8001816:	81a3      	strhne	r3, [r4, #12]
 8001818:	bd10      	pop	{r4, pc}

0800181a <__sclose>:
 800181a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800181e:	f000 b89d 	b.w	800195c <_close_r>

08001822 <__swbuf_r>:
 8001822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001824:	460e      	mov	r6, r1
 8001826:	4614      	mov	r4, r2
 8001828:	4605      	mov	r5, r0
 800182a:	b118      	cbz	r0, 8001834 <__swbuf_r+0x12>
 800182c:	6a03      	ldr	r3, [r0, #32]
 800182e:	b90b      	cbnz	r3, 8001834 <__swbuf_r+0x12>
 8001830:	f7ff ff0e 	bl	8001650 <__sinit>
 8001834:	69a3      	ldr	r3, [r4, #24]
 8001836:	60a3      	str	r3, [r4, #8]
 8001838:	89a3      	ldrh	r3, [r4, #12]
 800183a:	071a      	lsls	r2, r3, #28
 800183c:	d501      	bpl.n	8001842 <__swbuf_r+0x20>
 800183e:	6923      	ldr	r3, [r4, #16]
 8001840:	b943      	cbnz	r3, 8001854 <__swbuf_r+0x32>
 8001842:	4621      	mov	r1, r4
 8001844:	4628      	mov	r0, r5
 8001846:	f000 f82b 	bl	80018a0 <__swsetup_r>
 800184a:	b118      	cbz	r0, 8001854 <__swbuf_r+0x32>
 800184c:	f04f 37ff 	mov.w	r7, #4294967295
 8001850:	4638      	mov	r0, r7
 8001852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	6922      	ldr	r2, [r4, #16]
 8001858:	1a98      	subs	r0, r3, r2
 800185a:	6963      	ldr	r3, [r4, #20]
 800185c:	b2f6      	uxtb	r6, r6
 800185e:	4283      	cmp	r3, r0
 8001860:	4637      	mov	r7, r6
 8001862:	dc05      	bgt.n	8001870 <__swbuf_r+0x4e>
 8001864:	4621      	mov	r1, r4
 8001866:	4628      	mov	r0, r5
 8001868:	f000 fd32 	bl	80022d0 <_fflush_r>
 800186c:	2800      	cmp	r0, #0
 800186e:	d1ed      	bne.n	800184c <__swbuf_r+0x2a>
 8001870:	68a3      	ldr	r3, [r4, #8]
 8001872:	3b01      	subs	r3, #1
 8001874:	60a3      	str	r3, [r4, #8]
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	6022      	str	r2, [r4, #0]
 800187c:	701e      	strb	r6, [r3, #0]
 800187e:	6962      	ldr	r2, [r4, #20]
 8001880:	1c43      	adds	r3, r0, #1
 8001882:	429a      	cmp	r2, r3
 8001884:	d004      	beq.n	8001890 <__swbuf_r+0x6e>
 8001886:	89a3      	ldrh	r3, [r4, #12]
 8001888:	07db      	lsls	r3, r3, #31
 800188a:	d5e1      	bpl.n	8001850 <__swbuf_r+0x2e>
 800188c:	2e0a      	cmp	r6, #10
 800188e:	d1df      	bne.n	8001850 <__swbuf_r+0x2e>
 8001890:	4621      	mov	r1, r4
 8001892:	4628      	mov	r0, r5
 8001894:	f000 fd1c 	bl	80022d0 <_fflush_r>
 8001898:	2800      	cmp	r0, #0
 800189a:	d0d9      	beq.n	8001850 <__swbuf_r+0x2e>
 800189c:	e7d6      	b.n	800184c <__swbuf_r+0x2a>
	...

080018a0 <__swsetup_r>:
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <__swsetup_r+0xa8>)
 80018a4:	4605      	mov	r5, r0
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	460c      	mov	r4, r1
 80018aa:	b118      	cbz	r0, 80018b4 <__swsetup_r+0x14>
 80018ac:	6a03      	ldr	r3, [r0, #32]
 80018ae:	b90b      	cbnz	r3, 80018b4 <__swsetup_r+0x14>
 80018b0:	f7ff fece 	bl	8001650 <__sinit>
 80018b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018b8:	0719      	lsls	r1, r3, #28
 80018ba:	d422      	bmi.n	8001902 <__swsetup_r+0x62>
 80018bc:	06da      	lsls	r2, r3, #27
 80018be:	d407      	bmi.n	80018d0 <__swsetup_r+0x30>
 80018c0:	2209      	movs	r2, #9
 80018c2:	602a      	str	r2, [r5, #0]
 80018c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018c8:	81a3      	strh	r3, [r4, #12]
 80018ca:	f04f 30ff 	mov.w	r0, #4294967295
 80018ce:	e033      	b.n	8001938 <__swsetup_r+0x98>
 80018d0:	0758      	lsls	r0, r3, #29
 80018d2:	d512      	bpl.n	80018fa <__swsetup_r+0x5a>
 80018d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018d6:	b141      	cbz	r1, 80018ea <__swsetup_r+0x4a>
 80018d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018dc:	4299      	cmp	r1, r3
 80018de:	d002      	beq.n	80018e6 <__swsetup_r+0x46>
 80018e0:	4628      	mov	r0, r5
 80018e2:	f000 f8af 	bl	8001a44 <_free_r>
 80018e6:	2300      	movs	r3, #0
 80018e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80018ea:	89a3      	ldrh	r3, [r4, #12]
 80018ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80018f0:	81a3      	strh	r3, [r4, #12]
 80018f2:	2300      	movs	r3, #0
 80018f4:	6063      	str	r3, [r4, #4]
 80018f6:	6923      	ldr	r3, [r4, #16]
 80018f8:	6023      	str	r3, [r4, #0]
 80018fa:	89a3      	ldrh	r3, [r4, #12]
 80018fc:	f043 0308 	orr.w	r3, r3, #8
 8001900:	81a3      	strh	r3, [r4, #12]
 8001902:	6923      	ldr	r3, [r4, #16]
 8001904:	b94b      	cbnz	r3, 800191a <__swsetup_r+0x7a>
 8001906:	89a3      	ldrh	r3, [r4, #12]
 8001908:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800190c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001910:	d003      	beq.n	800191a <__swsetup_r+0x7a>
 8001912:	4621      	mov	r1, r4
 8001914:	4628      	mov	r0, r5
 8001916:	f000 fd29 	bl	800236c <__smakebuf_r>
 800191a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800191e:	f013 0201 	ands.w	r2, r3, #1
 8001922:	d00a      	beq.n	800193a <__swsetup_r+0x9a>
 8001924:	2200      	movs	r2, #0
 8001926:	60a2      	str	r2, [r4, #8]
 8001928:	6962      	ldr	r2, [r4, #20]
 800192a:	4252      	negs	r2, r2
 800192c:	61a2      	str	r2, [r4, #24]
 800192e:	6922      	ldr	r2, [r4, #16]
 8001930:	b942      	cbnz	r2, 8001944 <__swsetup_r+0xa4>
 8001932:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001936:	d1c5      	bne.n	80018c4 <__swsetup_r+0x24>
 8001938:	bd38      	pop	{r3, r4, r5, pc}
 800193a:	0799      	lsls	r1, r3, #30
 800193c:	bf58      	it	pl
 800193e:	6962      	ldrpl	r2, [r4, #20]
 8001940:	60a2      	str	r2, [r4, #8]
 8001942:	e7f4      	b.n	800192e <__swsetup_r+0x8e>
 8001944:	2000      	movs	r0, #0
 8001946:	e7f7      	b.n	8001938 <__swsetup_r+0x98>
 8001948:	20000020 	.word	0x20000020

0800194c <memset>:
 800194c:	4402      	add	r2, r0
 800194e:	4603      	mov	r3, r0
 8001950:	4293      	cmp	r3, r2
 8001952:	d100      	bne.n	8001956 <memset+0xa>
 8001954:	4770      	bx	lr
 8001956:	f803 1b01 	strb.w	r1, [r3], #1
 800195a:	e7f9      	b.n	8001950 <memset+0x4>

0800195c <_close_r>:
 800195c:	b538      	push	{r3, r4, r5, lr}
 800195e:	4d06      	ldr	r5, [pc, #24]	@ (8001978 <_close_r+0x1c>)
 8001960:	2300      	movs	r3, #0
 8001962:	4604      	mov	r4, r0
 8001964:	4608      	mov	r0, r1
 8001966:	602b      	str	r3, [r5, #0]
 8001968:	f7ff f81d 	bl	80009a6 <_close>
 800196c:	1c43      	adds	r3, r0, #1
 800196e:	d102      	bne.n	8001976 <_close_r+0x1a>
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	b103      	cbz	r3, 8001976 <_close_r+0x1a>
 8001974:	6023      	str	r3, [r4, #0]
 8001976:	bd38      	pop	{r3, r4, r5, pc}
 8001978:	2000020c 	.word	0x2000020c

0800197c <_lseek_r>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	4d07      	ldr	r5, [pc, #28]	@ (800199c <_lseek_r+0x20>)
 8001980:	4604      	mov	r4, r0
 8001982:	4608      	mov	r0, r1
 8001984:	4611      	mov	r1, r2
 8001986:	2200      	movs	r2, #0
 8001988:	602a      	str	r2, [r5, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	f7ff f82f 	bl	80009ee <_lseek>
 8001990:	1c43      	adds	r3, r0, #1
 8001992:	d102      	bne.n	800199a <_lseek_r+0x1e>
 8001994:	682b      	ldr	r3, [r5, #0]
 8001996:	b103      	cbz	r3, 800199a <_lseek_r+0x1e>
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	bd38      	pop	{r3, r4, r5, pc}
 800199c:	2000020c 	.word	0x2000020c

080019a0 <_read_r>:
 80019a0:	b538      	push	{r3, r4, r5, lr}
 80019a2:	4d07      	ldr	r5, [pc, #28]	@ (80019c0 <_read_r+0x20>)
 80019a4:	4604      	mov	r4, r0
 80019a6:	4608      	mov	r0, r1
 80019a8:	4611      	mov	r1, r2
 80019aa:	2200      	movs	r2, #0
 80019ac:	602a      	str	r2, [r5, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f7fe ffc0 	bl	8000934 <_read>
 80019b4:	1c43      	adds	r3, r0, #1
 80019b6:	d102      	bne.n	80019be <_read_r+0x1e>
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	b103      	cbz	r3, 80019be <_read_r+0x1e>
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	2000020c 	.word	0x2000020c

080019c4 <_write_r>:
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4d07      	ldr	r5, [pc, #28]	@ (80019e4 <_write_r+0x20>)
 80019c8:	4604      	mov	r4, r0
 80019ca:	4608      	mov	r0, r1
 80019cc:	4611      	mov	r1, r2
 80019ce:	2200      	movs	r2, #0
 80019d0:	602a      	str	r2, [r5, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f7fe ffcb 	bl	800096e <_write>
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	d102      	bne.n	80019e2 <_write_r+0x1e>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	b103      	cbz	r3, 80019e2 <_write_r+0x1e>
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	2000020c 	.word	0x2000020c

080019e8 <__errno>:
 80019e8:	4b01      	ldr	r3, [pc, #4]	@ (80019f0 <__errno+0x8>)
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000020 	.word	0x20000020

080019f4 <__libc_init_array>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	4d0d      	ldr	r5, [pc, #52]	@ (8001a2c <__libc_init_array+0x38>)
 80019f8:	4c0d      	ldr	r4, [pc, #52]	@ (8001a30 <__libc_init_array+0x3c>)
 80019fa:	1b64      	subs	r4, r4, r5
 80019fc:	10a4      	asrs	r4, r4, #2
 80019fe:	2600      	movs	r6, #0
 8001a00:	42a6      	cmp	r6, r4
 8001a02:	d109      	bne.n	8001a18 <__libc_init_array+0x24>
 8001a04:	4d0b      	ldr	r5, [pc, #44]	@ (8001a34 <__libc_init_array+0x40>)
 8001a06:	4c0c      	ldr	r4, [pc, #48]	@ (8001a38 <__libc_init_array+0x44>)
 8001a08:	f000 fd1e 	bl	8002448 <_init>
 8001a0c:	1b64      	subs	r4, r4, r5
 8001a0e:	10a4      	asrs	r4, r4, #2
 8001a10:	2600      	movs	r6, #0
 8001a12:	42a6      	cmp	r6, r4
 8001a14:	d105      	bne.n	8001a22 <__libc_init_array+0x2e>
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
 8001a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1c:	4798      	blx	r3
 8001a1e:	3601      	adds	r6, #1
 8001a20:	e7ee      	b.n	8001a00 <__libc_init_array+0xc>
 8001a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a26:	4798      	blx	r3
 8001a28:	3601      	adds	r6, #1
 8001a2a:	e7f2      	b.n	8001a12 <__libc_init_array+0x1e>
 8001a2c:	08002560 	.word	0x08002560
 8001a30:	08002560 	.word	0x08002560
 8001a34:	08002560 	.word	0x08002560
 8001a38:	08002564 	.word	0x08002564

08001a3c <__retarget_lock_init_recursive>:
 8001a3c:	4770      	bx	lr

08001a3e <__retarget_lock_acquire_recursive>:
 8001a3e:	4770      	bx	lr

08001a40 <__retarget_lock_release_recursive>:
 8001a40:	4770      	bx	lr
	...

08001a44 <_free_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4605      	mov	r5, r0
 8001a48:	2900      	cmp	r1, #0
 8001a4a:	d041      	beq.n	8001ad0 <_free_r+0x8c>
 8001a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a50:	1f0c      	subs	r4, r1, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bfb8      	it	lt
 8001a56:	18e4      	addlt	r4, r4, r3
 8001a58:	f000 f8e0 	bl	8001c1c <__malloc_lock>
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad4 <_free_r+0x90>)
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	b933      	cbnz	r3, 8001a70 <_free_r+0x2c>
 8001a62:	6063      	str	r3, [r4, #4]
 8001a64:	6014      	str	r4, [r2, #0]
 8001a66:	4628      	mov	r0, r5
 8001a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a6c:	f000 b8dc 	b.w	8001c28 <__malloc_unlock>
 8001a70:	42a3      	cmp	r3, r4
 8001a72:	d908      	bls.n	8001a86 <_free_r+0x42>
 8001a74:	6820      	ldr	r0, [r4, #0]
 8001a76:	1821      	adds	r1, r4, r0
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	bf01      	itttt	eq
 8001a7c:	6819      	ldreq	r1, [r3, #0]
 8001a7e:	685b      	ldreq	r3, [r3, #4]
 8001a80:	1809      	addeq	r1, r1, r0
 8001a82:	6021      	streq	r1, [r4, #0]
 8001a84:	e7ed      	b.n	8001a62 <_free_r+0x1e>
 8001a86:	461a      	mov	r2, r3
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	b10b      	cbz	r3, 8001a90 <_free_r+0x4c>
 8001a8c:	42a3      	cmp	r3, r4
 8001a8e:	d9fa      	bls.n	8001a86 <_free_r+0x42>
 8001a90:	6811      	ldr	r1, [r2, #0]
 8001a92:	1850      	adds	r0, r2, r1
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d10b      	bne.n	8001ab0 <_free_r+0x6c>
 8001a98:	6820      	ldr	r0, [r4, #0]
 8001a9a:	4401      	add	r1, r0
 8001a9c:	1850      	adds	r0, r2, r1
 8001a9e:	4283      	cmp	r3, r0
 8001aa0:	6011      	str	r1, [r2, #0]
 8001aa2:	d1e0      	bne.n	8001a66 <_free_r+0x22>
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	6053      	str	r3, [r2, #4]
 8001aaa:	4408      	add	r0, r1
 8001aac:	6010      	str	r0, [r2, #0]
 8001aae:	e7da      	b.n	8001a66 <_free_r+0x22>
 8001ab0:	d902      	bls.n	8001ab8 <_free_r+0x74>
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	602b      	str	r3, [r5, #0]
 8001ab6:	e7d6      	b.n	8001a66 <_free_r+0x22>
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	1821      	adds	r1, r4, r0
 8001abc:	428b      	cmp	r3, r1
 8001abe:	bf04      	itt	eq
 8001ac0:	6819      	ldreq	r1, [r3, #0]
 8001ac2:	685b      	ldreq	r3, [r3, #4]
 8001ac4:	6063      	str	r3, [r4, #4]
 8001ac6:	bf04      	itt	eq
 8001ac8:	1809      	addeq	r1, r1, r0
 8001aca:	6021      	streq	r1, [r4, #0]
 8001acc:	6054      	str	r4, [r2, #4]
 8001ace:	e7ca      	b.n	8001a66 <_free_r+0x22>
 8001ad0:	bd38      	pop	{r3, r4, r5, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000218 	.word	0x20000218

08001ad8 <sbrk_aligned>:
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	4e0f      	ldr	r6, [pc, #60]	@ (8001b18 <sbrk_aligned+0x40>)
 8001adc:	460c      	mov	r4, r1
 8001ade:	6831      	ldr	r1, [r6, #0]
 8001ae0:	4605      	mov	r5, r0
 8001ae2:	b911      	cbnz	r1, 8001aea <sbrk_aligned+0x12>
 8001ae4:	f000 fca0 	bl	8002428 <_sbrk_r>
 8001ae8:	6030      	str	r0, [r6, #0]
 8001aea:	4621      	mov	r1, r4
 8001aec:	4628      	mov	r0, r5
 8001aee:	f000 fc9b 	bl	8002428 <_sbrk_r>
 8001af2:	1c43      	adds	r3, r0, #1
 8001af4:	d103      	bne.n	8001afe <sbrk_aligned+0x26>
 8001af6:	f04f 34ff 	mov.w	r4, #4294967295
 8001afa:	4620      	mov	r0, r4
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
 8001afe:	1cc4      	adds	r4, r0, #3
 8001b00:	f024 0403 	bic.w	r4, r4, #3
 8001b04:	42a0      	cmp	r0, r4
 8001b06:	d0f8      	beq.n	8001afa <sbrk_aligned+0x22>
 8001b08:	1a21      	subs	r1, r4, r0
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	f000 fc8c 	bl	8002428 <_sbrk_r>
 8001b10:	3001      	adds	r0, #1
 8001b12:	d1f2      	bne.n	8001afa <sbrk_aligned+0x22>
 8001b14:	e7ef      	b.n	8001af6 <sbrk_aligned+0x1e>
 8001b16:	bf00      	nop
 8001b18:	20000214 	.word	0x20000214

08001b1c <_malloc_r>:
 8001b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b20:	1ccd      	adds	r5, r1, #3
 8001b22:	f025 0503 	bic.w	r5, r5, #3
 8001b26:	3508      	adds	r5, #8
 8001b28:	2d0c      	cmp	r5, #12
 8001b2a:	bf38      	it	cc
 8001b2c:	250c      	movcc	r5, #12
 8001b2e:	2d00      	cmp	r5, #0
 8001b30:	4606      	mov	r6, r0
 8001b32:	db01      	blt.n	8001b38 <_malloc_r+0x1c>
 8001b34:	42a9      	cmp	r1, r5
 8001b36:	d904      	bls.n	8001b42 <_malloc_r+0x26>
 8001b38:	230c      	movs	r3, #12
 8001b3a:	6033      	str	r3, [r6, #0]
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c18 <_malloc_r+0xfc>
 8001b46:	f000 f869 	bl	8001c1c <__malloc_lock>
 8001b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8001b4e:	461c      	mov	r4, r3
 8001b50:	bb44      	cbnz	r4, 8001ba4 <_malloc_r+0x88>
 8001b52:	4629      	mov	r1, r5
 8001b54:	4630      	mov	r0, r6
 8001b56:	f7ff ffbf 	bl	8001ad8 <sbrk_aligned>
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	d158      	bne.n	8001c12 <_malloc_r+0xf6>
 8001b60:	f8d8 4000 	ldr.w	r4, [r8]
 8001b64:	4627      	mov	r7, r4
 8001b66:	2f00      	cmp	r7, #0
 8001b68:	d143      	bne.n	8001bf2 <_malloc_r+0xd6>
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	d04b      	beq.n	8001c06 <_malloc_r+0xea>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4639      	mov	r1, r7
 8001b72:	4630      	mov	r0, r6
 8001b74:	eb04 0903 	add.w	r9, r4, r3
 8001b78:	f000 fc56 	bl	8002428 <_sbrk_r>
 8001b7c:	4581      	cmp	r9, r0
 8001b7e:	d142      	bne.n	8001c06 <_malloc_r+0xea>
 8001b80:	6821      	ldr	r1, [r4, #0]
 8001b82:	1a6d      	subs	r5, r5, r1
 8001b84:	4629      	mov	r1, r5
 8001b86:	4630      	mov	r0, r6
 8001b88:	f7ff ffa6 	bl	8001ad8 <sbrk_aligned>
 8001b8c:	3001      	adds	r0, #1
 8001b8e:	d03a      	beq.n	8001c06 <_malloc_r+0xea>
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	442b      	add	r3, r5
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	f8d8 3000 	ldr.w	r3, [r8]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	bb62      	cbnz	r2, 8001bf8 <_malloc_r+0xdc>
 8001b9e:	f8c8 7000 	str.w	r7, [r8]
 8001ba2:	e00f      	b.n	8001bc4 <_malloc_r+0xa8>
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	1b52      	subs	r2, r2, r5
 8001ba8:	d420      	bmi.n	8001bec <_malloc_r+0xd0>
 8001baa:	2a0b      	cmp	r2, #11
 8001bac:	d917      	bls.n	8001bde <_malloc_r+0xc2>
 8001bae:	1961      	adds	r1, r4, r5
 8001bb0:	42a3      	cmp	r3, r4
 8001bb2:	6025      	str	r5, [r4, #0]
 8001bb4:	bf18      	it	ne
 8001bb6:	6059      	strne	r1, [r3, #4]
 8001bb8:	6863      	ldr	r3, [r4, #4]
 8001bba:	bf08      	it	eq
 8001bbc:	f8c8 1000 	streq.w	r1, [r8]
 8001bc0:	5162      	str	r2, [r4, r5]
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f000 f82f 	bl	8001c28 <__malloc_unlock>
 8001bca:	f104 000b 	add.w	r0, r4, #11
 8001bce:	1d23      	adds	r3, r4, #4
 8001bd0:	f020 0007 	bic.w	r0, r0, #7
 8001bd4:	1ac2      	subs	r2, r0, r3
 8001bd6:	bf1c      	itt	ne
 8001bd8:	1a1b      	subne	r3, r3, r0
 8001bda:	50a3      	strne	r3, [r4, r2]
 8001bdc:	e7af      	b.n	8001b3e <_malloc_r+0x22>
 8001bde:	6862      	ldr	r2, [r4, #4]
 8001be0:	42a3      	cmp	r3, r4
 8001be2:	bf0c      	ite	eq
 8001be4:	f8c8 2000 	streq.w	r2, [r8]
 8001be8:	605a      	strne	r2, [r3, #4]
 8001bea:	e7eb      	b.n	8001bc4 <_malloc_r+0xa8>
 8001bec:	4623      	mov	r3, r4
 8001bee:	6864      	ldr	r4, [r4, #4]
 8001bf0:	e7ae      	b.n	8001b50 <_malloc_r+0x34>
 8001bf2:	463c      	mov	r4, r7
 8001bf4:	687f      	ldr	r7, [r7, #4]
 8001bf6:	e7b6      	b.n	8001b66 <_malloc_r+0x4a>
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	42a3      	cmp	r3, r4
 8001bfe:	d1fb      	bne.n	8001bf8 <_malloc_r+0xdc>
 8001c00:	2300      	movs	r3, #0
 8001c02:	6053      	str	r3, [r2, #4]
 8001c04:	e7de      	b.n	8001bc4 <_malloc_r+0xa8>
 8001c06:	230c      	movs	r3, #12
 8001c08:	6033      	str	r3, [r6, #0]
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	f000 f80c 	bl	8001c28 <__malloc_unlock>
 8001c10:	e794      	b.n	8001b3c <_malloc_r+0x20>
 8001c12:	6005      	str	r5, [r0, #0]
 8001c14:	e7d6      	b.n	8001bc4 <_malloc_r+0xa8>
 8001c16:	bf00      	nop
 8001c18:	20000218 	.word	0x20000218

08001c1c <__malloc_lock>:
 8001c1c:	4801      	ldr	r0, [pc, #4]	@ (8001c24 <__malloc_lock+0x8>)
 8001c1e:	f7ff bf0e 	b.w	8001a3e <__retarget_lock_acquire_recursive>
 8001c22:	bf00      	nop
 8001c24:	20000210 	.word	0x20000210

08001c28 <__malloc_unlock>:
 8001c28:	4801      	ldr	r0, [pc, #4]	@ (8001c30 <__malloc_unlock+0x8>)
 8001c2a:	f7ff bf09 	b.w	8001a40 <__retarget_lock_release_recursive>
 8001c2e:	bf00      	nop
 8001c30:	20000210 	.word	0x20000210

08001c34 <__sfputc_r>:
 8001c34:	6893      	ldr	r3, [r2, #8]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	b410      	push	{r4}
 8001c3c:	6093      	str	r3, [r2, #8]
 8001c3e:	da07      	bge.n	8001c50 <__sfputc_r+0x1c>
 8001c40:	6994      	ldr	r4, [r2, #24]
 8001c42:	42a3      	cmp	r3, r4
 8001c44:	db01      	blt.n	8001c4a <__sfputc_r+0x16>
 8001c46:	290a      	cmp	r1, #10
 8001c48:	d102      	bne.n	8001c50 <__sfputc_r+0x1c>
 8001c4a:	bc10      	pop	{r4}
 8001c4c:	f7ff bde9 	b.w	8001822 <__swbuf_r>
 8001c50:	6813      	ldr	r3, [r2, #0]
 8001c52:	1c58      	adds	r0, r3, #1
 8001c54:	6010      	str	r0, [r2, #0]
 8001c56:	7019      	strb	r1, [r3, #0]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	bc10      	pop	{r4}
 8001c5c:	4770      	bx	lr

08001c5e <__sfputs_r>:
 8001c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c60:	4606      	mov	r6, r0
 8001c62:	460f      	mov	r7, r1
 8001c64:	4614      	mov	r4, r2
 8001c66:	18d5      	adds	r5, r2, r3
 8001c68:	42ac      	cmp	r4, r5
 8001c6a:	d101      	bne.n	8001c70 <__sfputs_r+0x12>
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	e007      	b.n	8001c80 <__sfputs_r+0x22>
 8001c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c74:	463a      	mov	r2, r7
 8001c76:	4630      	mov	r0, r6
 8001c78:	f7ff ffdc 	bl	8001c34 <__sfputc_r>
 8001c7c:	1c43      	adds	r3, r0, #1
 8001c7e:	d1f3      	bne.n	8001c68 <__sfputs_r+0xa>
 8001c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c84 <_vfiprintf_r>:
 8001c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c88:	460d      	mov	r5, r1
 8001c8a:	b09d      	sub	sp, #116	@ 0x74
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	4698      	mov	r8, r3
 8001c90:	4606      	mov	r6, r0
 8001c92:	b118      	cbz	r0, 8001c9c <_vfiprintf_r+0x18>
 8001c94:	6a03      	ldr	r3, [r0, #32]
 8001c96:	b90b      	cbnz	r3, 8001c9c <_vfiprintf_r+0x18>
 8001c98:	f7ff fcda 	bl	8001650 <__sinit>
 8001c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c9e:	07d9      	lsls	r1, r3, #31
 8001ca0:	d405      	bmi.n	8001cae <_vfiprintf_r+0x2a>
 8001ca2:	89ab      	ldrh	r3, [r5, #12]
 8001ca4:	059a      	lsls	r2, r3, #22
 8001ca6:	d402      	bmi.n	8001cae <_vfiprintf_r+0x2a>
 8001ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001caa:	f7ff fec8 	bl	8001a3e <__retarget_lock_acquire_recursive>
 8001cae:	89ab      	ldrh	r3, [r5, #12]
 8001cb0:	071b      	lsls	r3, r3, #28
 8001cb2:	d501      	bpl.n	8001cb8 <_vfiprintf_r+0x34>
 8001cb4:	692b      	ldr	r3, [r5, #16]
 8001cb6:	b99b      	cbnz	r3, 8001ce0 <_vfiprintf_r+0x5c>
 8001cb8:	4629      	mov	r1, r5
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f7ff fdf0 	bl	80018a0 <__swsetup_r>
 8001cc0:	b170      	cbz	r0, 8001ce0 <_vfiprintf_r+0x5c>
 8001cc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001cc4:	07dc      	lsls	r4, r3, #31
 8001cc6:	d504      	bpl.n	8001cd2 <_vfiprintf_r+0x4e>
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	b01d      	add	sp, #116	@ 0x74
 8001cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cd2:	89ab      	ldrh	r3, [r5, #12]
 8001cd4:	0598      	lsls	r0, r3, #22
 8001cd6:	d4f7      	bmi.n	8001cc8 <_vfiprintf_r+0x44>
 8001cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001cda:	f7ff feb1 	bl	8001a40 <__retarget_lock_release_recursive>
 8001cde:	e7f3      	b.n	8001cc8 <_vfiprintf_r+0x44>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cee:	2330      	movs	r3, #48	@ 0x30
 8001cf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001ea0 <_vfiprintf_r+0x21c>
 8001cf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001cf8:	f04f 0901 	mov.w	r9, #1
 8001cfc:	4623      	mov	r3, r4
 8001cfe:	469a      	mov	sl, r3
 8001d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d04:	b10a      	cbz	r2, 8001d0a <_vfiprintf_r+0x86>
 8001d06:	2a25      	cmp	r2, #37	@ 0x25
 8001d08:	d1f9      	bne.n	8001cfe <_vfiprintf_r+0x7a>
 8001d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8001d0e:	d00b      	beq.n	8001d28 <_vfiprintf_r+0xa4>
 8001d10:	465b      	mov	r3, fp
 8001d12:	4622      	mov	r2, r4
 8001d14:	4629      	mov	r1, r5
 8001d16:	4630      	mov	r0, r6
 8001d18:	f7ff ffa1 	bl	8001c5e <__sfputs_r>
 8001d1c:	3001      	adds	r0, #1
 8001d1e:	f000 80a7 	beq.w	8001e70 <_vfiprintf_r+0x1ec>
 8001d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d24:	445a      	add	r2, fp
 8001d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d28:	f89a 3000 	ldrb.w	r3, [sl]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 809f 	beq.w	8001e70 <_vfiprintf_r+0x1ec>
 8001d32:	2300      	movs	r3, #0
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d3c:	f10a 0a01 	add.w	sl, sl, #1
 8001d40:	9304      	str	r3, [sp, #16]
 8001d42:	9307      	str	r3, [sp, #28]
 8001d44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d48:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d4a:	4654      	mov	r4, sl
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d52:	4853      	ldr	r0, [pc, #332]	@ (8001ea0 <_vfiprintf_r+0x21c>)
 8001d54:	f7fe fa3c 	bl	80001d0 <memchr>
 8001d58:	9a04      	ldr	r2, [sp, #16]
 8001d5a:	b9d8      	cbnz	r0, 8001d94 <_vfiprintf_r+0x110>
 8001d5c:	06d1      	lsls	r1, r2, #27
 8001d5e:	bf44      	itt	mi
 8001d60:	2320      	movmi	r3, #32
 8001d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d66:	0713      	lsls	r3, r2, #28
 8001d68:	bf44      	itt	mi
 8001d6a:	232b      	movmi	r3, #43	@ 0x2b
 8001d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d70:	f89a 3000 	ldrb.w	r3, [sl]
 8001d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d76:	d015      	beq.n	8001da4 <_vfiprintf_r+0x120>
 8001d78:	9a07      	ldr	r2, [sp, #28]
 8001d7a:	4654      	mov	r4, sl
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f04f 0c0a 	mov.w	ip, #10
 8001d82:	4621      	mov	r1, r4
 8001d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d88:	3b30      	subs	r3, #48	@ 0x30
 8001d8a:	2b09      	cmp	r3, #9
 8001d8c:	d94b      	bls.n	8001e26 <_vfiprintf_r+0x1a2>
 8001d8e:	b1b0      	cbz	r0, 8001dbe <_vfiprintf_r+0x13a>
 8001d90:	9207      	str	r2, [sp, #28]
 8001d92:	e014      	b.n	8001dbe <_vfiprintf_r+0x13a>
 8001d94:	eba0 0308 	sub.w	r3, r0, r8
 8001d98:	fa09 f303 	lsl.w	r3, r9, r3
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	9304      	str	r3, [sp, #16]
 8001da0:	46a2      	mov	sl, r4
 8001da2:	e7d2      	b.n	8001d4a <_vfiprintf_r+0xc6>
 8001da4:	9b03      	ldr	r3, [sp, #12]
 8001da6:	1d19      	adds	r1, r3, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	9103      	str	r1, [sp, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bfbb      	ittet	lt
 8001db0:	425b      	neglt	r3, r3
 8001db2:	f042 0202 	orrlt.w	r2, r2, #2
 8001db6:	9307      	strge	r3, [sp, #28]
 8001db8:	9307      	strlt	r3, [sp, #28]
 8001dba:	bfb8      	it	lt
 8001dbc:	9204      	strlt	r2, [sp, #16]
 8001dbe:	7823      	ldrb	r3, [r4, #0]
 8001dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dc2:	d10a      	bne.n	8001dda <_vfiprintf_r+0x156>
 8001dc4:	7863      	ldrb	r3, [r4, #1]
 8001dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dc8:	d132      	bne.n	8001e30 <_vfiprintf_r+0x1ac>
 8001dca:	9b03      	ldr	r3, [sp, #12]
 8001dcc:	1d1a      	adds	r2, r3, #4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	9203      	str	r2, [sp, #12]
 8001dd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001dd6:	3402      	adds	r4, #2
 8001dd8:	9305      	str	r3, [sp, #20]
 8001dda:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001ea4 <_vfiprintf_r+0x220>
 8001dde:	7821      	ldrb	r1, [r4, #0]
 8001de0:	2203      	movs	r2, #3
 8001de2:	4650      	mov	r0, sl
 8001de4:	f7fe f9f4 	bl	80001d0 <memchr>
 8001de8:	b138      	cbz	r0, 8001dfa <_vfiprintf_r+0x176>
 8001dea:	9b04      	ldr	r3, [sp, #16]
 8001dec:	eba0 000a 	sub.w	r0, r0, sl
 8001df0:	2240      	movs	r2, #64	@ 0x40
 8001df2:	4082      	lsls	r2, r0
 8001df4:	4313      	orrs	r3, r2
 8001df6:	3401      	adds	r4, #1
 8001df8:	9304      	str	r3, [sp, #16]
 8001dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dfe:	482a      	ldr	r0, [pc, #168]	@ (8001ea8 <_vfiprintf_r+0x224>)
 8001e00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e04:	2206      	movs	r2, #6
 8001e06:	f7fe f9e3 	bl	80001d0 <memchr>
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d03f      	beq.n	8001e8e <_vfiprintf_r+0x20a>
 8001e0e:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <_vfiprintf_r+0x228>)
 8001e10:	bb1b      	cbnz	r3, 8001e5a <_vfiprintf_r+0x1d6>
 8001e12:	9b03      	ldr	r3, [sp, #12]
 8001e14:	3307      	adds	r3, #7
 8001e16:	f023 0307 	bic.w	r3, r3, #7
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	9303      	str	r3, [sp, #12]
 8001e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e20:	443b      	add	r3, r7
 8001e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e24:	e76a      	b.n	8001cfc <_vfiprintf_r+0x78>
 8001e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	e7a8      	b.n	8001d82 <_vfiprintf_r+0xfe>
 8001e30:	2300      	movs	r3, #0
 8001e32:	3401      	adds	r4, #1
 8001e34:	9305      	str	r3, [sp, #20]
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 0c0a 	mov.w	ip, #10
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e42:	3a30      	subs	r2, #48	@ 0x30
 8001e44:	2a09      	cmp	r2, #9
 8001e46:	d903      	bls.n	8001e50 <_vfiprintf_r+0x1cc>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0c6      	beq.n	8001dda <_vfiprintf_r+0x156>
 8001e4c:	9105      	str	r1, [sp, #20]
 8001e4e:	e7c4      	b.n	8001dda <_vfiprintf_r+0x156>
 8001e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e54:	4604      	mov	r4, r0
 8001e56:	2301      	movs	r3, #1
 8001e58:	e7f0      	b.n	8001e3c <_vfiprintf_r+0x1b8>
 8001e5a:	ab03      	add	r3, sp, #12
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	462a      	mov	r2, r5
 8001e60:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <_vfiprintf_r+0x22c>)
 8001e62:	a904      	add	r1, sp, #16
 8001e64:	4630      	mov	r0, r6
 8001e66:	f3af 8000 	nop.w
 8001e6a:	4607      	mov	r7, r0
 8001e6c:	1c78      	adds	r0, r7, #1
 8001e6e:	d1d6      	bne.n	8001e1e <_vfiprintf_r+0x19a>
 8001e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e72:	07d9      	lsls	r1, r3, #31
 8001e74:	d405      	bmi.n	8001e82 <_vfiprintf_r+0x1fe>
 8001e76:	89ab      	ldrh	r3, [r5, #12]
 8001e78:	059a      	lsls	r2, r3, #22
 8001e7a:	d402      	bmi.n	8001e82 <_vfiprintf_r+0x1fe>
 8001e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e7e:	f7ff fddf 	bl	8001a40 <__retarget_lock_release_recursive>
 8001e82:	89ab      	ldrh	r3, [r5, #12]
 8001e84:	065b      	lsls	r3, r3, #25
 8001e86:	f53f af1f 	bmi.w	8001cc8 <_vfiprintf_r+0x44>
 8001e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001e8c:	e71e      	b.n	8001ccc <_vfiprintf_r+0x48>
 8001e8e:	ab03      	add	r3, sp, #12
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	462a      	mov	r2, r5
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <_vfiprintf_r+0x22c>)
 8001e96:	a904      	add	r1, sp, #16
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f000 f879 	bl	8001f90 <_printf_i>
 8001e9e:	e7e4      	b.n	8001e6a <_vfiprintf_r+0x1e6>
 8001ea0:	08002524 	.word	0x08002524
 8001ea4:	0800252a 	.word	0x0800252a
 8001ea8:	0800252e 	.word	0x0800252e
 8001eac:	00000000 	.word	0x00000000
 8001eb0:	08001c5f 	.word	0x08001c5f

08001eb4 <_printf_common>:
 8001eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb8:	4616      	mov	r6, r2
 8001eba:	4698      	mov	r8, r3
 8001ebc:	688a      	ldr	r2, [r1, #8]
 8001ebe:	690b      	ldr	r3, [r1, #16]
 8001ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	bfb8      	it	lt
 8001ec8:	4613      	movlt	r3, r2
 8001eca:	6033      	str	r3, [r6, #0]
 8001ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ed0:	4607      	mov	r7, r0
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	b10a      	cbz	r2, 8001eda <_printf_common+0x26>
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	6033      	str	r3, [r6, #0]
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	0699      	lsls	r1, r3, #26
 8001ede:	bf42      	ittt	mi
 8001ee0:	6833      	ldrmi	r3, [r6, #0]
 8001ee2:	3302      	addmi	r3, #2
 8001ee4:	6033      	strmi	r3, [r6, #0]
 8001ee6:	6825      	ldr	r5, [r4, #0]
 8001ee8:	f015 0506 	ands.w	r5, r5, #6
 8001eec:	d106      	bne.n	8001efc <_printf_common+0x48>
 8001eee:	f104 0a19 	add.w	sl, r4, #25
 8001ef2:	68e3      	ldr	r3, [r4, #12]
 8001ef4:	6832      	ldr	r2, [r6, #0]
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	42ab      	cmp	r3, r5
 8001efa:	dc26      	bgt.n	8001f4a <_printf_common+0x96>
 8001efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f00:	6822      	ldr	r2, [r4, #0]
 8001f02:	3b00      	subs	r3, #0
 8001f04:	bf18      	it	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	0692      	lsls	r2, r2, #26
 8001f0a:	d42b      	bmi.n	8001f64 <_printf_common+0xb0>
 8001f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f10:	4641      	mov	r1, r8
 8001f12:	4638      	mov	r0, r7
 8001f14:	47c8      	blx	r9
 8001f16:	3001      	adds	r0, #1
 8001f18:	d01e      	beq.n	8001f58 <_printf_common+0xa4>
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	6922      	ldr	r2, [r4, #16]
 8001f1e:	f003 0306 	and.w	r3, r3, #6
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf02      	ittt	eq
 8001f26:	68e5      	ldreq	r5, [r4, #12]
 8001f28:	6833      	ldreq	r3, [r6, #0]
 8001f2a:	1aed      	subeq	r5, r5, r3
 8001f2c:	68a3      	ldr	r3, [r4, #8]
 8001f2e:	bf0c      	ite	eq
 8001f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f34:	2500      	movne	r5, #0
 8001f36:	4293      	cmp	r3, r2
 8001f38:	bfc4      	itt	gt
 8001f3a:	1a9b      	subgt	r3, r3, r2
 8001f3c:	18ed      	addgt	r5, r5, r3
 8001f3e:	2600      	movs	r6, #0
 8001f40:	341a      	adds	r4, #26
 8001f42:	42b5      	cmp	r5, r6
 8001f44:	d11a      	bne.n	8001f7c <_printf_common+0xc8>
 8001f46:	2000      	movs	r0, #0
 8001f48:	e008      	b.n	8001f5c <_printf_common+0xa8>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4652      	mov	r2, sl
 8001f4e:	4641      	mov	r1, r8
 8001f50:	4638      	mov	r0, r7
 8001f52:	47c8      	blx	r9
 8001f54:	3001      	adds	r0, #1
 8001f56:	d103      	bne.n	8001f60 <_printf_common+0xac>
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f60:	3501      	adds	r5, #1
 8001f62:	e7c6      	b.n	8001ef2 <_printf_common+0x3e>
 8001f64:	18e1      	adds	r1, r4, r3
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	2030      	movs	r0, #48	@ 0x30
 8001f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f6e:	4422      	add	r2, r4
 8001f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f78:	3302      	adds	r3, #2
 8001f7a:	e7c7      	b.n	8001f0c <_printf_common+0x58>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	4622      	mov	r2, r4
 8001f80:	4641      	mov	r1, r8
 8001f82:	4638      	mov	r0, r7
 8001f84:	47c8      	blx	r9
 8001f86:	3001      	adds	r0, #1
 8001f88:	d0e6      	beq.n	8001f58 <_printf_common+0xa4>
 8001f8a:	3601      	adds	r6, #1
 8001f8c:	e7d9      	b.n	8001f42 <_printf_common+0x8e>
	...

08001f90 <_printf_i>:
 8001f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f94:	7e0f      	ldrb	r7, [r1, #24]
 8001f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f98:	2f78      	cmp	r7, #120	@ 0x78
 8001f9a:	4691      	mov	r9, r2
 8001f9c:	4680      	mov	r8, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	469a      	mov	sl, r3
 8001fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001fa6:	d807      	bhi.n	8001fb8 <_printf_i+0x28>
 8001fa8:	2f62      	cmp	r7, #98	@ 0x62
 8001faa:	d80a      	bhi.n	8001fc2 <_printf_i+0x32>
 8001fac:	2f00      	cmp	r7, #0
 8001fae:	f000 80d2 	beq.w	8002156 <_printf_i+0x1c6>
 8001fb2:	2f58      	cmp	r7, #88	@ 0x58
 8001fb4:	f000 80b9 	beq.w	800212a <_printf_i+0x19a>
 8001fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fc0:	e03a      	b.n	8002038 <_printf_i+0xa8>
 8001fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001fc6:	2b15      	cmp	r3, #21
 8001fc8:	d8f6      	bhi.n	8001fb8 <_printf_i+0x28>
 8001fca:	a101      	add	r1, pc, #4	@ (adr r1, 8001fd0 <_printf_i+0x40>)
 8001fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fd0:	08002029 	.word	0x08002029
 8001fd4:	0800203d 	.word	0x0800203d
 8001fd8:	08001fb9 	.word	0x08001fb9
 8001fdc:	08001fb9 	.word	0x08001fb9
 8001fe0:	08001fb9 	.word	0x08001fb9
 8001fe4:	08001fb9 	.word	0x08001fb9
 8001fe8:	0800203d 	.word	0x0800203d
 8001fec:	08001fb9 	.word	0x08001fb9
 8001ff0:	08001fb9 	.word	0x08001fb9
 8001ff4:	08001fb9 	.word	0x08001fb9
 8001ff8:	08001fb9 	.word	0x08001fb9
 8001ffc:	0800213d 	.word	0x0800213d
 8002000:	08002067 	.word	0x08002067
 8002004:	080020f7 	.word	0x080020f7
 8002008:	08001fb9 	.word	0x08001fb9
 800200c:	08001fb9 	.word	0x08001fb9
 8002010:	0800215f 	.word	0x0800215f
 8002014:	08001fb9 	.word	0x08001fb9
 8002018:	08002067 	.word	0x08002067
 800201c:	08001fb9 	.word	0x08001fb9
 8002020:	08001fb9 	.word	0x08001fb9
 8002024:	080020ff 	.word	0x080020ff
 8002028:	6833      	ldr	r3, [r6, #0]
 800202a:	1d1a      	adds	r2, r3, #4
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6032      	str	r2, [r6, #0]
 8002030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002038:	2301      	movs	r3, #1
 800203a:	e09d      	b.n	8002178 <_printf_i+0x1e8>
 800203c:	6833      	ldr	r3, [r6, #0]
 800203e:	6820      	ldr	r0, [r4, #0]
 8002040:	1d19      	adds	r1, r3, #4
 8002042:	6031      	str	r1, [r6, #0]
 8002044:	0606      	lsls	r6, r0, #24
 8002046:	d501      	bpl.n	800204c <_printf_i+0xbc>
 8002048:	681d      	ldr	r5, [r3, #0]
 800204a:	e003      	b.n	8002054 <_printf_i+0xc4>
 800204c:	0645      	lsls	r5, r0, #25
 800204e:	d5fb      	bpl.n	8002048 <_printf_i+0xb8>
 8002050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002054:	2d00      	cmp	r5, #0
 8002056:	da03      	bge.n	8002060 <_printf_i+0xd0>
 8002058:	232d      	movs	r3, #45	@ 0x2d
 800205a:	426d      	negs	r5, r5
 800205c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002060:	4859      	ldr	r0, [pc, #356]	@ (80021c8 <_printf_i+0x238>)
 8002062:	230a      	movs	r3, #10
 8002064:	e011      	b.n	800208a <_printf_i+0xfa>
 8002066:	6821      	ldr	r1, [r4, #0]
 8002068:	6833      	ldr	r3, [r6, #0]
 800206a:	0608      	lsls	r0, r1, #24
 800206c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002070:	d402      	bmi.n	8002078 <_printf_i+0xe8>
 8002072:	0649      	lsls	r1, r1, #25
 8002074:	bf48      	it	mi
 8002076:	b2ad      	uxthmi	r5, r5
 8002078:	2f6f      	cmp	r7, #111	@ 0x6f
 800207a:	4853      	ldr	r0, [pc, #332]	@ (80021c8 <_printf_i+0x238>)
 800207c:	6033      	str	r3, [r6, #0]
 800207e:	bf14      	ite	ne
 8002080:	230a      	movne	r3, #10
 8002082:	2308      	moveq	r3, #8
 8002084:	2100      	movs	r1, #0
 8002086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800208a:	6866      	ldr	r6, [r4, #4]
 800208c:	60a6      	str	r6, [r4, #8]
 800208e:	2e00      	cmp	r6, #0
 8002090:	bfa2      	ittt	ge
 8002092:	6821      	ldrge	r1, [r4, #0]
 8002094:	f021 0104 	bicge.w	r1, r1, #4
 8002098:	6021      	strge	r1, [r4, #0]
 800209a:	b90d      	cbnz	r5, 80020a0 <_printf_i+0x110>
 800209c:	2e00      	cmp	r6, #0
 800209e:	d04b      	beq.n	8002138 <_printf_i+0x1a8>
 80020a0:	4616      	mov	r6, r2
 80020a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80020a6:	fb03 5711 	mls	r7, r3, r1, r5
 80020aa:	5dc7      	ldrb	r7, [r0, r7]
 80020ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020b0:	462f      	mov	r7, r5
 80020b2:	42bb      	cmp	r3, r7
 80020b4:	460d      	mov	r5, r1
 80020b6:	d9f4      	bls.n	80020a2 <_printf_i+0x112>
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d10b      	bne.n	80020d4 <_printf_i+0x144>
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	07df      	lsls	r7, r3, #31
 80020c0:	d508      	bpl.n	80020d4 <_printf_i+0x144>
 80020c2:	6923      	ldr	r3, [r4, #16]
 80020c4:	6861      	ldr	r1, [r4, #4]
 80020c6:	4299      	cmp	r1, r3
 80020c8:	bfde      	ittt	le
 80020ca:	2330      	movle	r3, #48	@ 0x30
 80020cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020d4:	1b92      	subs	r2, r2, r6
 80020d6:	6122      	str	r2, [r4, #16]
 80020d8:	f8cd a000 	str.w	sl, [sp]
 80020dc:	464b      	mov	r3, r9
 80020de:	aa03      	add	r2, sp, #12
 80020e0:	4621      	mov	r1, r4
 80020e2:	4640      	mov	r0, r8
 80020e4:	f7ff fee6 	bl	8001eb4 <_printf_common>
 80020e8:	3001      	adds	r0, #1
 80020ea:	d14a      	bne.n	8002182 <_printf_i+0x1f2>
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	b004      	add	sp, #16
 80020f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	f043 0320 	orr.w	r3, r3, #32
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	4833      	ldr	r0, [pc, #204]	@ (80021cc <_printf_i+0x23c>)
 8002100:	2778      	movs	r7, #120	@ 0x78
 8002102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	6831      	ldr	r1, [r6, #0]
 800210a:	061f      	lsls	r7, r3, #24
 800210c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002110:	d402      	bmi.n	8002118 <_printf_i+0x188>
 8002112:	065f      	lsls	r7, r3, #25
 8002114:	bf48      	it	mi
 8002116:	b2ad      	uxthmi	r5, r5
 8002118:	6031      	str	r1, [r6, #0]
 800211a:	07d9      	lsls	r1, r3, #31
 800211c:	bf44      	itt	mi
 800211e:	f043 0320 	orrmi.w	r3, r3, #32
 8002122:	6023      	strmi	r3, [r4, #0]
 8002124:	b11d      	cbz	r5, 800212e <_printf_i+0x19e>
 8002126:	2310      	movs	r3, #16
 8002128:	e7ac      	b.n	8002084 <_printf_i+0xf4>
 800212a:	4827      	ldr	r0, [pc, #156]	@ (80021c8 <_printf_i+0x238>)
 800212c:	e7e9      	b.n	8002102 <_printf_i+0x172>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	f023 0320 	bic.w	r3, r3, #32
 8002134:	6023      	str	r3, [r4, #0]
 8002136:	e7f6      	b.n	8002126 <_printf_i+0x196>
 8002138:	4616      	mov	r6, r2
 800213a:	e7bd      	b.n	80020b8 <_printf_i+0x128>
 800213c:	6833      	ldr	r3, [r6, #0]
 800213e:	6825      	ldr	r5, [r4, #0]
 8002140:	6961      	ldr	r1, [r4, #20]
 8002142:	1d18      	adds	r0, r3, #4
 8002144:	6030      	str	r0, [r6, #0]
 8002146:	062e      	lsls	r6, r5, #24
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	d501      	bpl.n	8002150 <_printf_i+0x1c0>
 800214c:	6019      	str	r1, [r3, #0]
 800214e:	e002      	b.n	8002156 <_printf_i+0x1c6>
 8002150:	0668      	lsls	r0, r5, #25
 8002152:	d5fb      	bpl.n	800214c <_printf_i+0x1bc>
 8002154:	8019      	strh	r1, [r3, #0]
 8002156:	2300      	movs	r3, #0
 8002158:	6123      	str	r3, [r4, #16]
 800215a:	4616      	mov	r6, r2
 800215c:	e7bc      	b.n	80020d8 <_printf_i+0x148>
 800215e:	6833      	ldr	r3, [r6, #0]
 8002160:	1d1a      	adds	r2, r3, #4
 8002162:	6032      	str	r2, [r6, #0]
 8002164:	681e      	ldr	r6, [r3, #0]
 8002166:	6862      	ldr	r2, [r4, #4]
 8002168:	2100      	movs	r1, #0
 800216a:	4630      	mov	r0, r6
 800216c:	f7fe f830 	bl	80001d0 <memchr>
 8002170:	b108      	cbz	r0, 8002176 <_printf_i+0x1e6>
 8002172:	1b80      	subs	r0, r0, r6
 8002174:	6060      	str	r0, [r4, #4]
 8002176:	6863      	ldr	r3, [r4, #4]
 8002178:	6123      	str	r3, [r4, #16]
 800217a:	2300      	movs	r3, #0
 800217c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002180:	e7aa      	b.n	80020d8 <_printf_i+0x148>
 8002182:	6923      	ldr	r3, [r4, #16]
 8002184:	4632      	mov	r2, r6
 8002186:	4649      	mov	r1, r9
 8002188:	4640      	mov	r0, r8
 800218a:	47d0      	blx	sl
 800218c:	3001      	adds	r0, #1
 800218e:	d0ad      	beq.n	80020ec <_printf_i+0x15c>
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	079b      	lsls	r3, r3, #30
 8002194:	d413      	bmi.n	80021be <_printf_i+0x22e>
 8002196:	68e0      	ldr	r0, [r4, #12]
 8002198:	9b03      	ldr	r3, [sp, #12]
 800219a:	4298      	cmp	r0, r3
 800219c:	bfb8      	it	lt
 800219e:	4618      	movlt	r0, r3
 80021a0:	e7a6      	b.n	80020f0 <_printf_i+0x160>
 80021a2:	2301      	movs	r3, #1
 80021a4:	4632      	mov	r2, r6
 80021a6:	4649      	mov	r1, r9
 80021a8:	4640      	mov	r0, r8
 80021aa:	47d0      	blx	sl
 80021ac:	3001      	adds	r0, #1
 80021ae:	d09d      	beq.n	80020ec <_printf_i+0x15c>
 80021b0:	3501      	adds	r5, #1
 80021b2:	68e3      	ldr	r3, [r4, #12]
 80021b4:	9903      	ldr	r1, [sp, #12]
 80021b6:	1a5b      	subs	r3, r3, r1
 80021b8:	42ab      	cmp	r3, r5
 80021ba:	dcf2      	bgt.n	80021a2 <_printf_i+0x212>
 80021bc:	e7eb      	b.n	8002196 <_printf_i+0x206>
 80021be:	2500      	movs	r5, #0
 80021c0:	f104 0619 	add.w	r6, r4, #25
 80021c4:	e7f5      	b.n	80021b2 <_printf_i+0x222>
 80021c6:	bf00      	nop
 80021c8:	08002535 	.word	0x08002535
 80021cc:	08002546 	.word	0x08002546

080021d0 <__sflush_r>:
 80021d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	0716      	lsls	r6, r2, #28
 80021d8:	4605      	mov	r5, r0
 80021da:	460c      	mov	r4, r1
 80021dc:	d454      	bmi.n	8002288 <__sflush_r+0xb8>
 80021de:	684b      	ldr	r3, [r1, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dc02      	bgt.n	80021ea <__sflush_r+0x1a>
 80021e4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	dd48      	ble.n	800227c <__sflush_r+0xac>
 80021ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021ec:	2e00      	cmp	r6, #0
 80021ee:	d045      	beq.n	800227c <__sflush_r+0xac>
 80021f0:	2300      	movs	r3, #0
 80021f2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80021f6:	682f      	ldr	r7, [r5, #0]
 80021f8:	6a21      	ldr	r1, [r4, #32]
 80021fa:	602b      	str	r3, [r5, #0]
 80021fc:	d030      	beq.n	8002260 <__sflush_r+0x90>
 80021fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002200:	89a3      	ldrh	r3, [r4, #12]
 8002202:	0759      	lsls	r1, r3, #29
 8002204:	d505      	bpl.n	8002212 <__sflush_r+0x42>
 8002206:	6863      	ldr	r3, [r4, #4]
 8002208:	1ad2      	subs	r2, r2, r3
 800220a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800220c:	b10b      	cbz	r3, 8002212 <__sflush_r+0x42>
 800220e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002210:	1ad2      	subs	r2, r2, r3
 8002212:	2300      	movs	r3, #0
 8002214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002216:	6a21      	ldr	r1, [r4, #32]
 8002218:	4628      	mov	r0, r5
 800221a:	47b0      	blx	r6
 800221c:	1c43      	adds	r3, r0, #1
 800221e:	89a3      	ldrh	r3, [r4, #12]
 8002220:	d106      	bne.n	8002230 <__sflush_r+0x60>
 8002222:	6829      	ldr	r1, [r5, #0]
 8002224:	291d      	cmp	r1, #29
 8002226:	d82b      	bhi.n	8002280 <__sflush_r+0xb0>
 8002228:	4a28      	ldr	r2, [pc, #160]	@ (80022cc <__sflush_r+0xfc>)
 800222a:	410a      	asrs	r2, r1
 800222c:	07d6      	lsls	r6, r2, #31
 800222e:	d427      	bmi.n	8002280 <__sflush_r+0xb0>
 8002230:	2200      	movs	r2, #0
 8002232:	6062      	str	r2, [r4, #4]
 8002234:	04d9      	lsls	r1, r3, #19
 8002236:	6922      	ldr	r2, [r4, #16]
 8002238:	6022      	str	r2, [r4, #0]
 800223a:	d504      	bpl.n	8002246 <__sflush_r+0x76>
 800223c:	1c42      	adds	r2, r0, #1
 800223e:	d101      	bne.n	8002244 <__sflush_r+0x74>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b903      	cbnz	r3, 8002246 <__sflush_r+0x76>
 8002244:	6560      	str	r0, [r4, #84]	@ 0x54
 8002246:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002248:	602f      	str	r7, [r5, #0]
 800224a:	b1b9      	cbz	r1, 800227c <__sflush_r+0xac>
 800224c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002250:	4299      	cmp	r1, r3
 8002252:	d002      	beq.n	800225a <__sflush_r+0x8a>
 8002254:	4628      	mov	r0, r5
 8002256:	f7ff fbf5 	bl	8001a44 <_free_r>
 800225a:	2300      	movs	r3, #0
 800225c:	6363      	str	r3, [r4, #52]	@ 0x34
 800225e:	e00d      	b.n	800227c <__sflush_r+0xac>
 8002260:	2301      	movs	r3, #1
 8002262:	4628      	mov	r0, r5
 8002264:	47b0      	blx	r6
 8002266:	4602      	mov	r2, r0
 8002268:	1c50      	adds	r0, r2, #1
 800226a:	d1c9      	bne.n	8002200 <__sflush_r+0x30>
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0c6      	beq.n	8002200 <__sflush_r+0x30>
 8002272:	2b1d      	cmp	r3, #29
 8002274:	d001      	beq.n	800227a <__sflush_r+0xaa>
 8002276:	2b16      	cmp	r3, #22
 8002278:	d11d      	bne.n	80022b6 <__sflush_r+0xe6>
 800227a:	602f      	str	r7, [r5, #0]
 800227c:	2000      	movs	r0, #0
 800227e:	e021      	b.n	80022c4 <__sflush_r+0xf4>
 8002280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002284:	b21b      	sxth	r3, r3
 8002286:	e01a      	b.n	80022be <__sflush_r+0xee>
 8002288:	690f      	ldr	r7, [r1, #16]
 800228a:	2f00      	cmp	r7, #0
 800228c:	d0f6      	beq.n	800227c <__sflush_r+0xac>
 800228e:	0793      	lsls	r3, r2, #30
 8002290:	680e      	ldr	r6, [r1, #0]
 8002292:	bf08      	it	eq
 8002294:	694b      	ldreq	r3, [r1, #20]
 8002296:	600f      	str	r7, [r1, #0]
 8002298:	bf18      	it	ne
 800229a:	2300      	movne	r3, #0
 800229c:	1bf6      	subs	r6, r6, r7
 800229e:	608b      	str	r3, [r1, #8]
 80022a0:	2e00      	cmp	r6, #0
 80022a2:	ddeb      	ble.n	800227c <__sflush_r+0xac>
 80022a4:	6a21      	ldr	r1, [r4, #32]
 80022a6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80022aa:	4633      	mov	r3, r6
 80022ac:	463a      	mov	r2, r7
 80022ae:	4628      	mov	r0, r5
 80022b0:	47e0      	blx	ip
 80022b2:	2800      	cmp	r0, #0
 80022b4:	dc07      	bgt.n	80022c6 <__sflush_r+0xf6>
 80022b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022be:	81a3      	strh	r3, [r4, #12]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022c6:	4407      	add	r7, r0
 80022c8:	1a36      	subs	r6, r6, r0
 80022ca:	e7e9      	b.n	80022a0 <__sflush_r+0xd0>
 80022cc:	dfbffffe 	.word	0xdfbffffe

080022d0 <_fflush_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	690b      	ldr	r3, [r1, #16]
 80022d4:	4605      	mov	r5, r0
 80022d6:	460c      	mov	r4, r1
 80022d8:	b913      	cbnz	r3, 80022e0 <_fflush_r+0x10>
 80022da:	2500      	movs	r5, #0
 80022dc:	4628      	mov	r0, r5
 80022de:	bd38      	pop	{r3, r4, r5, pc}
 80022e0:	b118      	cbz	r0, 80022ea <_fflush_r+0x1a>
 80022e2:	6a03      	ldr	r3, [r0, #32]
 80022e4:	b90b      	cbnz	r3, 80022ea <_fflush_r+0x1a>
 80022e6:	f7ff f9b3 	bl	8001650 <__sinit>
 80022ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f3      	beq.n	80022da <_fflush_r+0xa>
 80022f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80022f4:	07d0      	lsls	r0, r2, #31
 80022f6:	d404      	bmi.n	8002302 <_fflush_r+0x32>
 80022f8:	0599      	lsls	r1, r3, #22
 80022fa:	d402      	bmi.n	8002302 <_fflush_r+0x32>
 80022fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022fe:	f7ff fb9e 	bl	8001a3e <__retarget_lock_acquire_recursive>
 8002302:	4628      	mov	r0, r5
 8002304:	4621      	mov	r1, r4
 8002306:	f7ff ff63 	bl	80021d0 <__sflush_r>
 800230a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800230c:	07da      	lsls	r2, r3, #31
 800230e:	4605      	mov	r5, r0
 8002310:	d4e4      	bmi.n	80022dc <_fflush_r+0xc>
 8002312:	89a3      	ldrh	r3, [r4, #12]
 8002314:	059b      	lsls	r3, r3, #22
 8002316:	d4e1      	bmi.n	80022dc <_fflush_r+0xc>
 8002318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800231a:	f7ff fb91 	bl	8001a40 <__retarget_lock_release_recursive>
 800231e:	e7dd      	b.n	80022dc <_fflush_r+0xc>

08002320 <__swhatbuf_r>:
 8002320:	b570      	push	{r4, r5, r6, lr}
 8002322:	460c      	mov	r4, r1
 8002324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002328:	2900      	cmp	r1, #0
 800232a:	b096      	sub	sp, #88	@ 0x58
 800232c:	4615      	mov	r5, r2
 800232e:	461e      	mov	r6, r3
 8002330:	da0d      	bge.n	800234e <__swhatbuf_r+0x2e>
 8002332:	89a3      	ldrh	r3, [r4, #12]
 8002334:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	bf14      	ite	ne
 800233e:	2340      	movne	r3, #64	@ 0x40
 8002340:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002344:	2000      	movs	r0, #0
 8002346:	6031      	str	r1, [r6, #0]
 8002348:	602b      	str	r3, [r5, #0]
 800234a:	b016      	add	sp, #88	@ 0x58
 800234c:	bd70      	pop	{r4, r5, r6, pc}
 800234e:	466a      	mov	r2, sp
 8002350:	f000 f848 	bl	80023e4 <_fstat_r>
 8002354:	2800      	cmp	r0, #0
 8002356:	dbec      	blt.n	8002332 <__swhatbuf_r+0x12>
 8002358:	9901      	ldr	r1, [sp, #4]
 800235a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800235e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002362:	4259      	negs	r1, r3
 8002364:	4159      	adcs	r1, r3
 8002366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800236a:	e7eb      	b.n	8002344 <__swhatbuf_r+0x24>

0800236c <__smakebuf_r>:
 800236c:	898b      	ldrh	r3, [r1, #12]
 800236e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002370:	079d      	lsls	r5, r3, #30
 8002372:	4606      	mov	r6, r0
 8002374:	460c      	mov	r4, r1
 8002376:	d507      	bpl.n	8002388 <__smakebuf_r+0x1c>
 8002378:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	6123      	str	r3, [r4, #16]
 8002380:	2301      	movs	r3, #1
 8002382:	6163      	str	r3, [r4, #20]
 8002384:	b003      	add	sp, #12
 8002386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002388:	ab01      	add	r3, sp, #4
 800238a:	466a      	mov	r2, sp
 800238c:	f7ff ffc8 	bl	8002320 <__swhatbuf_r>
 8002390:	9f00      	ldr	r7, [sp, #0]
 8002392:	4605      	mov	r5, r0
 8002394:	4639      	mov	r1, r7
 8002396:	4630      	mov	r0, r6
 8002398:	f7ff fbc0 	bl	8001b1c <_malloc_r>
 800239c:	b948      	cbnz	r0, 80023b2 <__smakebuf_r+0x46>
 800239e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a2:	059a      	lsls	r2, r3, #22
 80023a4:	d4ee      	bmi.n	8002384 <__smakebuf_r+0x18>
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	81a3      	strh	r3, [r4, #12]
 80023b0:	e7e2      	b.n	8002378 <__smakebuf_r+0xc>
 80023b2:	89a3      	ldrh	r3, [r4, #12]
 80023b4:	6020      	str	r0, [r4, #0]
 80023b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ba:	81a3      	strh	r3, [r4, #12]
 80023bc:	9b01      	ldr	r3, [sp, #4]
 80023be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80023c2:	b15b      	cbz	r3, 80023dc <__smakebuf_r+0x70>
 80023c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023c8:	4630      	mov	r0, r6
 80023ca:	f000 f81d 	bl	8002408 <_isatty_r>
 80023ce:	b128      	cbz	r0, 80023dc <__smakebuf_r+0x70>
 80023d0:	89a3      	ldrh	r3, [r4, #12]
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	81a3      	strh	r3, [r4, #12]
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	431d      	orrs	r5, r3
 80023e0:	81a5      	strh	r5, [r4, #12]
 80023e2:	e7cf      	b.n	8002384 <__smakebuf_r+0x18>

080023e4 <_fstat_r>:
 80023e4:	b538      	push	{r3, r4, r5, lr}
 80023e6:	4d07      	ldr	r5, [pc, #28]	@ (8002404 <_fstat_r+0x20>)
 80023e8:	2300      	movs	r3, #0
 80023ea:	4604      	mov	r4, r0
 80023ec:	4608      	mov	r0, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	602b      	str	r3, [r5, #0]
 80023f2:	f7fe fae3 	bl	80009bc <_fstat>
 80023f6:	1c43      	adds	r3, r0, #1
 80023f8:	d102      	bne.n	8002400 <_fstat_r+0x1c>
 80023fa:	682b      	ldr	r3, [r5, #0]
 80023fc:	b103      	cbz	r3, 8002400 <_fstat_r+0x1c>
 80023fe:	6023      	str	r3, [r4, #0]
 8002400:	bd38      	pop	{r3, r4, r5, pc}
 8002402:	bf00      	nop
 8002404:	2000020c 	.word	0x2000020c

08002408 <_isatty_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	4d06      	ldr	r5, [pc, #24]	@ (8002424 <_isatty_r+0x1c>)
 800240c:	2300      	movs	r3, #0
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	602b      	str	r3, [r5, #0]
 8002414:	f7fe fae1 	bl	80009da <_isatty>
 8002418:	1c43      	adds	r3, r0, #1
 800241a:	d102      	bne.n	8002422 <_isatty_r+0x1a>
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	b103      	cbz	r3, 8002422 <_isatty_r+0x1a>
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	bd38      	pop	{r3, r4, r5, pc}
 8002424:	2000020c 	.word	0x2000020c

08002428 <_sbrk_r>:
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	4d06      	ldr	r5, [pc, #24]	@ (8002444 <_sbrk_r+0x1c>)
 800242c:	2300      	movs	r3, #0
 800242e:	4604      	mov	r4, r0
 8002430:	4608      	mov	r0, r1
 8002432:	602b      	str	r3, [r5, #0]
 8002434:	f7fe fae8 	bl	8000a08 <_sbrk>
 8002438:	1c43      	adds	r3, r0, #1
 800243a:	d102      	bne.n	8002442 <_sbrk_r+0x1a>
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	b103      	cbz	r3, 8002442 <_sbrk_r+0x1a>
 8002440:	6023      	str	r3, [r4, #0]
 8002442:	bd38      	pop	{r3, r4, r5, pc}
 8002444:	2000020c 	.word	0x2000020c

08002448 <_init>:
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244a:	bf00      	nop
 800244c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244e:	bc08      	pop	{r3}
 8002450:	469e      	mov	lr, r3
 8002452:	4770      	bx	lr

08002454 <_fini>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	bf00      	nop
 8002458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245a:	bc08      	pop	{r3}
 800245c:	469e      	mov	lr, r3
 800245e:	4770      	bx	lr
